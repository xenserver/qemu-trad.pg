From 811c8d56c9c7804ba4856dab069c3f4173df0e42 Mon Sep 17 00:00:00 2001
From: Kaifeng Zhu <kaifeng.zhu@citrix.com>
Date: Thu, 12 Mar 2015 07:43:53 +0000
Subject: [PATCH] CP-12149: Implement the PCI device for PV Windows Update

Command line -pciemulation doesn't work for this particular PCI device as
it doesn't provide io_region.

The PCI device is added if (and only if) VM.has-vendor-device is 1.
---
 hw/pc.c           |    7 +++
 hw/xen_pvdevice.c |  128 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 hw/xen_pvdevice.h |    8 ++++
 qemu-xen.h        |    1 +
 xen-hooks.mak     |    1 +
 xenstore.c        |   20 +++++++++
 6 files changed, 165 insertions(+)
 create mode 100644 hw/xen_pvdevice.c
 create mode 100644 hw/xen_pvdevice.h

diff --git a/hw/pc.c b/hw/pc.c
index e805705..a835049 100644
--- a/hw/pc.c
+++ b/hw/pc.c
@@ -36,6 +36,7 @@
 #include "qemu-xen.h"
 
 #include "xen_platform.h"
+#include "xen_pvdevice.h"
 #include "fw_cfg.h"
 #include "virtio-blk.h"
 #include "virtio-balloon.h"
@@ -1181,6 +1182,12 @@ vga_bios_error:
         }
     }
 
+    if (pci_enabled) {
+        if (xenstore_get_xen_pvdevice_enabled()) {
+            xen_pvdevice_init(pci_bus, -1);
+        }
+    }
+
 #ifndef CONFIG_DM
     /* Add virtio block devices */
     if (pci_enabled) {
diff --git a/hw/xen_pvdevice.c b/hw/xen_pvdevice.c
new file mode 100644
index 0000000..79e24e2
--- /dev/null
+++ b/hw/xen_pvdevice.c
@@ -0,0 +1,128 @@
+/* Copyright (c) Citrix Systems Inc.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms,
+ * with or without modification, are permitted provided
+ * that the following conditions are met:
+ *
+ * *   Redistributions of source code must retain the above
+ *     copyright notice, this list of conditions and the
+ *     following disclaimer.
+ * *   Redistributions in binary form must reproduce the above
+ *     copyright notice, this list of conditions and the
+ *     following disclaimer in the documentation and/or other
+ *     materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
+ * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ */
+
+#include "hw.h"
+#include "pci.h"
+#include "qemu-xen.h"
+#include "xen_pvdevice.h"
+
+extern FILE *logfile;
+
+static uint32_t xen_pv_mmio_read(void *opaque, target_phys_addr_t addr)
+{
+    return ~0;
+}
+
+static void xen_pv_mmio_write(void *opaque, target_phys_addr_t addr,
+                              uint32_t val)
+{
+}
+
+static CPUReadMemoryFunc *xen_pv_mmio_read_funcs[3] = {
+    xen_pv_mmio_read,
+    xen_pv_mmio_read,
+    xen_pv_mmio_read,
+};
+
+static CPUWriteMemoryFunc *xen_pv_mmio_write_funcs[3] = {
+    xen_pv_mmio_write,
+    xen_pv_mmio_write,
+    xen_pv_mmio_write,
+};
+
+static void xen_pv_mmio_map(PCIDevice *d, int region_num,
+                            uint32_t addr, uint32_t size, int type)
+{
+    int mmio_io_addr;
+
+    mmio_io_addr = cpu_register_io_memory(0, xen_pv_mmio_read_funcs,
+                                          xen_pv_mmio_write_funcs, NULL);
+
+    cpu_register_physical_memory(addr, size, mmio_io_addr);
+}
+
+static void xen_pv_save(QEMUFile *f, void *opaque)
+{
+    PCIDevice *d = opaque;
+
+    if (d)
+        pci_device_save(d, f);
+}
+
+static int xen_pv_load(QEMUFile *f, void *opaque, int version_id)
+{
+    PCIDevice *d = opaque;
+    int rc = 0;
+
+    if (d)
+        rc = pci_device_load(d, f);
+    return rc;
+}
+
+void xen_pvdevice_init(PCIBus *bus, int devfn)
+{
+    PCIDevice *d;
+    struct pci_config_header *pch;
+    const int io_region_size = 0x400000;
+    const char* pvdevice_name = "xen-pvdevice";
+
+    fprintf(logfile, "Register %s.\n", pvdevice_name);
+    d = pci_register_device(
+        bus, pvdevice_name, sizeof(PCIDevice), devfn, NULL, NULL);
+
+    pch = (struct pci_config_header *)d->config;
+    pch->vendor_id = 0x5853;
+    pch->device_id = 0xC000;
+    pch->command = 2; /* Memory access */
+    pch->status = 0;
+    pch->revision = 1;
+    pch->class = 0x08; /* Base System Peripherals */
+    pch->subclass = 0x80; /* Other system peripheral */
+    pch->api = 0;
+    pch->header_type = 0;
+    pch->subsystem_vendor_id = pch->vendor_id;
+    pch->subsystem_id = pch->device_id;
+    pch->interrupt_line = 0;
+    pch->interrupt_pin = 3;
+
+    fprintf(logfile, "%s: vendor-id=%04x device-id=%04x revsion=%02x size=%08x\n",
+            pvdevice_name,
+            pch->vendor_id,
+            pch->device_id,
+            pch->revision,
+            io_region_size);
+
+    pci_register_io_region(d, 1, io_region_size,
+                           PCI_ADDRESS_SPACE_MEM_PREFETCH, xen_pv_mmio_map);
+
+    register_savevm(pvdevice_name, -1, 1, xen_pv_save, xen_pv_load, d);
+    fprintf(logfile, "Done register %s.\n", pvdevice_name);
+}
diff --git a/hw/xen_pvdevice.h b/hw/xen_pvdevice.h
new file mode 100644
index 0000000..161bf7a
--- /dev/null
+++ b/hw/xen_pvdevice.h
@@ -0,0 +1,8 @@
+#ifndef XEN_PVDEVICE_H
+#define XEN_PVDEVICE_H
+
+#include "pci.h"
+
+void xen_pvdevice_init(PCIBus *bus, int devfn);
+
+#endif
diff --git a/qemu-xen.h b/qemu-xen.h
index d848a45..c4e0032 100644
--- a/qemu-xen.h
+++ b/qemu-xen.h
@@ -71,6 +71,7 @@ int xenstore_parse_disable_pf_config(void);
 struct pci_config_header;
 void xenstore_parse_pf_config(struct pci_config_header *pch);
 int xenstore_fd(void);
+int xenstore_get_xen_pvdevice_enabled(void);
 struct xs_handle *xenstore_get(void);
 void xenstore_process_event(void *opaque);
 void xenstore_record_dm_state(const char *state);
diff --git a/xen-hooks.mak b/xen-hooks.mak
index bc7f1f1..7966933 100644
--- a/xen-hooks.mak
+++ b/xen-hooks.mak
@@ -25,6 +25,7 @@ LDFLAGS := $(CFLAGS) $(LDFLAGS)
 OBJS += piix4acpi.o
 OBJS += xenstore.o
 OBJS += xen_platform.o
+OBJS += xen_pvdevice.o
 OBJS += xen_machine_fv.o
 OBJS += xen_machine_pv.o
 OBJS += xen_backend.o
diff --git a/xenstore.c b/xenstore.c
index a5a2434..a2bc683 100644
--- a/xenstore.c
+++ b/xenstore.c
@@ -983,6 +983,26 @@ done:
     platform_revision = pch->revision;
 }
 
+int xenstore_get_xen_pvdevice_enabled(void)
+{
+    char *node = NULL, *val = NULL;
+    unsigned int len;
+    int pvdevice_enabled = 0;  /* disabled by default */
+
+    if ( pasprintf(&node, "/local/domain/%u/control/has-vendor-device", domid) < 0 )
+        goto out;
+
+    if ( (val = xs_read(xsh, XBT_NULL, node, &len)) == NULL )
+        goto out;
+
+    pvdevice_enabled = (atoi(val) == 1);
+
+out:
+    free(val);
+    free(node);
+    return pvdevice_enabled;
+}
+
 int xenstore_fd(void)
 {
     if (xsh)
-- 
1.7.10.4

