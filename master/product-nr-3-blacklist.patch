# HG changeset patch
# Parent 67dca6cd3fe4183312db8873076882d2f91c85ea

Claim product number 3 for the new PV drivers and introduce
a new blakclisting scheme.

New PV drivers write a 'build number' that is actually a
combination of the platform PCI device ID and most recent
revision ID to which they are coded to bind to.
Thus if the actual platform PCI device does not match, or 
is a newer revision then the PV drivers will not bind. In
this case we want to prevent unplug of emulated devices
to avoid a VM crash due to lack of critical device (such
as the system disk).

Update:

Unfortunately after coding and deploying the new blacklisting
patch it was discovered the linux PVonHVM drivers have already
claimed product number 3 without registering an interest so
we workaround this by ignoring build numbers below 256.

Signed-off-by: Paul Durrant <paul.durrant@citrix.com>

diff -r 67dca6cd3fe4 xenstore.c
--- a/xenstore.c	Tue Sep 25 13:47:11 2012 +0100
+++ b/xenstore.c	Tue Sep 25 16:11:23 2012 +0100
@@ -789,6 +789,9 @@ int xenstore_parse_disable_pf_config ()
     return disable_pf;
 }
 
+static uint16_t platform_device_id;
+static uint8_t  platform_revision;
+
 void xenstore_parse_pf_config(struct pci_config_header *pch)
 {
     char *node, *val;
@@ -814,7 +817,7 @@ void xenstore_parse_pf_config(struct pci
         }
         free(node);
         if ( val == NULL )
-            return;
+            goto done;
     }
 
     pch->subsystem_id = pch->device_id;
@@ -842,6 +845,13 @@ void xenstore_parse_pf_config(struct pci
         }
         free(node);
     }
+
+done:
+    fprintf(logfile, "xen platform: device_id=%04X revision=%02X\n",
+            pch->device_id, pch->revision);
+
+    platform_device_id = pch->device_id;
+    platform_revision = pch->revision;
 }
 
 int xenstore_fd(void)
@@ -1011,11 +1021,8 @@ int
 xenstore_pv_driver_build_blacklisted(uint16_t product_nr,
                                      uint32_t build_nr)
 {
-    char *buf = NULL;
-    char *tmp;
     const char *product;
 
-    switch (product_nr) {
     /*
      * In qemu-xen-unstable, this is the master registry of product
      * numbers.  If you need a new product number allocating, please
@@ -1029,23 +1036,51 @@ xenstore_pv_driver_build_blacklisted(uin
      * During development, you may use the product ID 0xffff to
      * indicate a driver which is yet to be released.
      */
-    case 1: product = "xensource-windows";  break; /* Citrix */
-    case 2: product = "gplpv-windows";      break; /* James Harper */
-    case 0xffff: product = "experimental";  break;
+
+    switch (product_nr) {
+    case 1:
+    case 2:
+    case 0xffff: {
+        char *buf = NULL;
+        char *tmp;
+
+        switch (product_nr) {
+        case 1: product = "xensource-windows";  break; /* Citrix */
+        case 2: product = "gplpv-windows";      break; /* James Harper */
+        case 0xffff: product = "experimental";  break;
+        }
+
+        if (asprintf(&buf, "/mh/driver-blacklist/%s/%d", product, build_nr) < 0)
+            return 0;
+        tmp = xs_read(xsh, XBT_NULL, buf, NULL);
+        free(tmp);
+        free(buf);
+        if (tmp == NULL)
+            return 0;
+        else
+            return 1;
+    }
+    case 3: {
+        uint16_t device_id;
+        uint8_t revision;
+
+        device_id = (build_nr >> 8) & 0xffff;
+        revision = build_nr & 0xff;
+
+        if (device_id == 0)
+            return 0;
+
+        if (device_id != platform_device_id ||
+            revision < platform_revision)
+            return 1;
+        else
+            return 0;
+    }        
     default:
         /* Don't know what product this is -> we can't blacklist
          * it. */
         return 0;
     }
-    if (asprintf(&buf, "/mh/driver-blacklist/%s/%d", product, build_nr) < 0)
-        return 0;
-    tmp = xs_read(xsh, XBT_NULL, buf, NULL);
-    free(tmp);
-    free(buf);
-    if (tmp == NULL)
-        return 0;
-    else
-        return 1;
 }
 
 void xenstore_record_dm_state(const char *state)
