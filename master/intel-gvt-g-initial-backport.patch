From 9068015cb00f33d841c670c8b5a7b9fb7f2a3f0c Mon Sep 17 00:00:00 2001
From: Malcolm Crossley <malcolm.crossley@citrix.com>
Date: Fri, 14 Nov 2014 10:30:00 +0100
Subject: [PATCH] raw intel patch for gvt-g on QEMU 1.3 upstream

Backported to QEMU traditional on top of Xenserver 6.5 patch queue

Signed-off-by: Malcolm Crossley <malcolm.crossley@citrix.com>

Header from folded patch '0001-Always-destroy-the-kernel-vgt-instance.patch':

From f5ebc28dc05d2fe76a88c4e9bd263e608e66c594 Mon Sep 17 00:00:00 2001
From: Ross Lagerwall <ross.lagerwall@citrix.com>
Date: Fri, 6 Feb 2015 09:51:22 +0000
Subject: [PATCH] Always destroy the kernel vgt instance

Set up a SIGTERM handler so that the vgt instance is destroyed regardless
of how the VM is shutdown or rebooted.
diff --git a/Makefile.target b/Makefile.target
index 4532375..8c07dd9 100644
--- a/Makefile.target
+++ b/Makefile.target
@@ -590,7 +590,7 @@ OBJS+= ide.o pckbd.o ps2.o vga.o vgpu_fb.o dma.o
 OBJS+= fdc.o mc146818rtc.o serial.o i8259.o i8254.o pc.o
 OBJS+= cirrus_vga.o apic.o parallel.o acpi.o piix_pci.o
 OBJS+= usb-uhci.o vmmouse.o vmport.o vmware_vga.o hpet.o
-OBJS += device-hotplug.o pci-hotplug.o
+OBJS += device-hotplug.o pci-hotplug.o vga-xengt.o
 endif
 ifeq ($(TARGET_BASE_ARCH), ppc)
 CPPFLAGS += -DHAS_AUDIO -DHAS_AUDIO_CHOICE
diff --git a/cpu-all.h b/cpu-all.h
index 9292b1c..a581c54 100644
--- a/cpu-all.h
+++ b/cpu-all.h
@@ -862,6 +862,10 @@ extern int phys_ram_fd;
 extern uint8_t *phys_ram_base;
 extern uint8_t *phys_ram_dirty;
 extern ram_addr_t ram_size;
+extern int vgt_low_gm_sz;
+extern int vgt_high_gm_sz;
+extern int vgt_fence_sz;
+extern const char *vgt_monitor_config_file;
 
 /* physical memory access */
 
diff --git a/hw/hw.h b/hw/hw.h
index d29cc9b..d219708 100644
--- a/hw/hw.h
+++ b/hw/hw.h
@@ -246,6 +246,10 @@ typedef void QEMUResetHandler(void *opaque);
 
 void qemu_register_reset(QEMUResetHandler *func, void *opaque);
 
+typedef void QEMUExitHandler(void *opaque);
+
+void qemu_register_exit(QEMUExitHandler *func, void *opaque);
+
 /* handler to set the boot_device for a specific type of QEMUMachine */
 /* return 0 if success */
 typedef int QEMUBootSetHandler(void *opaque, const char *boot_device);
diff --git a/hw/pc.c b/hw/pc.c
index 53fb356..4ef17c8 100644
--- a/hw/pc.c
+++ b/hw/pc.c
@@ -45,6 +45,7 @@
 #ifdef CONFIG_PASSTHROUGH
 #include "pass-through.h"
 #endif
+#include "vga-xengt.h"
 
 /* output Bochs bios info messages */
 //#define DEBUG_BIOS
@@ -1017,6 +1018,8 @@ vga_bios_error:
         }
     } else if (vgpu_enabled) {
         vgpu_fb_init();
+    } else if (xengt_vga_enabled && pci_enabled) {
+        xengt_vga_init(pci_bus, vga_ram_addr, vga_ram_size);
     }
 
 #ifdef CONFIG_PASSTHROUGH
diff --git a/hw/pci.c b/hw/pci.c
index 7cc6671..20e1f03 100644
--- a/hw/pci.c
+++ b/hw/pci.c
@@ -248,9 +248,8 @@ PCIDevice *pci_register_device(PCIBus *bus, const char *name,
     if (devfn < 0) {
         for(devfn = bus->devfn_min ; devfn < 256; devfn += 8) {
 #ifdef CONFIG_PASSTHROUGH
-            /* reserve 00:02.0, because some BIOSs and drivers assume
-             * 00:02.0 for Intel IGD */
-            if ( gfx_passthru && devfn == 0x10 )
+            /* If vGT/XenGT is in use, reserve 00:02.* for the IGD */
+            if ((xengt_vga_enabled || gfx_passthru) && devfn == 0x10)
                 continue;
 #endif
             if ( !pci_devfn_in_use(bus, devfn) )
diff --git a/hw/piix_pci.c b/hw/piix_pci.c
index 56a1216..825d74b 100644
--- a/hw/piix_pci.c
+++ b/hw/piix_pci.c
@@ -28,6 +28,8 @@
 #ifdef CONFIG_PASSTHROUGH
 #include "pass-through.h"
 #endif
+#include "vga-xengt.h"
+extern int xengt_vga_enabled;
 
 static void i440fx_set_irq(qemu_irq *pic, int irq_num, int level);
 static void piix3_write_config(PCIDevice *d, 
@@ -127,6 +129,8 @@ void i440fx_set_smm(PCIDevice *d, int val)
         smm_enabled = val;
         i440fx_update_memory_mappings(d);
     }
+
+    vgt_bridge_pci_write(dev, address, val, len);
 }
 
 
@@ -209,7 +213,12 @@ PCIBus *i440fx_init(PCIDevice **pi440fx_state, qemu_irq *pic)
     register_ioport_read(0xcfc, 4, 4, pci_host_data_readl, s);
 
 #ifdef CONFIG_PASSTHROUGH
-    d = pci_register_device(b, "i440FX", sizeof(PCIDevice), 0,
+
+    if (xengt_vga_enabled)
+	    d = pci_register_device(b, "i440FX", sizeof(PCIDevice), 0,
+                            vgt_bridge_pci_read, vgt_bridge_pci_write);
+    else
+	    d = pci_register_device(b, "i440FX", sizeof(PCIDevice), 0,
                             igd_pci_read, igd_pci_write);
 #else
     d = pci_register_device(b, "i440FX", sizeof(PCIDevice), 0,
@@ -225,6 +234,9 @@ PCIBus *i440fx_init(PCIDevice **pi440fx_state, qemu_irq *pic)
 #ifndef CONFIG_DM
     d->config[0x72] = 0x02; /* SMRAM */
 #endif /* !CONFIG_DM */
+    if (xengt_vga_enabled) {
+        vgt_bridge_pci_conf_init(d);
+    }
 
     register_savevm("I440FX", 0, 2, i440fx_save, i440fx_load, d);
     *pi440fx_state = d;
diff --git a/hw/vga-xengt.c b/hw/vga-xengt.c
new file mode 100644
index 0000000..46fe3eb
--- /dev/null
+++ b/hw/vga-xengt.c
@@ -0,0 +1,646 @@
+/*
+ * QEMU vGT/XenGT Legacy VGA support
+ *
+ * Copyright (c) 2003 Fabrice Bellard
+ * Copyright (c) Citrix Systems, Inc
+ * Copyright (c) Intel
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+#include "hw.h"
+#include "console.h"
+#include "pc.h"
+#include "pci.h"
+#include "xen.h"
+typedef uint32_t pci_addr_t;
+#include "pci_host.h"
+#include "vga_int.h"
+#include "pixel_ops.h"
+#include "qemu-timer.h"
+#include "vga-xengt.h"
+#include "qemu-log.h"
+#include "pass-through.h"
+#include "assert.h"
+
+typedef struct vgt_vga_state {
+    PCIDevice dev;
+    //struct VGACommonState state;
+    int num_displays;
+    struct pci_dev host_dev;
+    bool instance_created;
+} vgt_vga_state_t;
+
+#define EDID_SIZE 128
+#define MAX_INPUT_NUM 3
+#define MAX_FILE_NAME_LENGTH 128
+
+/* port definition must align with gvt-g driver */
+enum vgt_port {
+    PORT_A = 0,
+    PORT_B,
+    PORT_C,
+    PORT_D,
+    PORT_E,
+    MAX_PORTS
+};
+
+typedef struct vgt_monitor_info {
+    unsigned char port_type:4;
+    unsigned char port_is_dp:4;  /* 0 = HDMI PORT, 1 = DP port, only valid for PORT_B/C/D */
+    unsigned char port_override;
+    unsigned char edid[EDID_SIZE];
+}vgt_monitor_info_t;
+
+/* These are the default values */
+int vgt_low_gm_sz = 128; /* in MB */
+int vgt_high_gm_sz = 448; /* in MB */
+int vgt_fence_sz = 4;
+int vgt_primary = 1; /* -1 means "not specified */
+const char *vgt_monitor_config_file = NULL;
+
+int vgt_legacy_vga_ram_size;
+void vga_map(PCIDevice *pci_dev, int region_num,
+                    uint32_t addr, uint32_t size, int type);
+
+
+static inline unsigned int port_info_to_type(unsigned char port_is_dp, int port)
+{
+    /* port type definition must align with gvt-g driver */
+    enum vgt_port_type {
+        VGT_CRT = 0,
+        VGT_DP_A,
+        VGT_DP_B,
+        VGT_DP_C,
+        VGT_DP_D,
+        VGT_HDMI_B,
+        VGT_HDMI_C,
+        VGT_HDMI_D,
+        VGT_PORT_TYPE_MAX
+    } ret;
+
+    switch (port) {
+        case PORT_A:
+            ret = VGT_DP_A;
+            break;
+        case PORT_B:
+            ret = (port_is_dp) ? VGT_DP_B : VGT_HDMI_B;
+            break;
+        case PORT_C:
+            ret = (port_is_dp) ? VGT_DP_C : VGT_HDMI_C;
+            break;
+        case PORT_D:
+            ret = (port_is_dp) ? VGT_DP_D : VGT_HDMI_D;
+            break;
+	case PORT_E:
+            ret = VGT_CRT;
+            break;
+        default:
+            ret = VGT_PORT_TYPE_MAX;
+            break;
+    }
+
+    return ret;
+}
+
+static bool validate_monitor_configs(vgt_monitor_info_t *config)
+{
+    if (config->port_type >= MAX_PORTS) {
+        qemu_log("vGT: %s failed because the invalid port_type input: %d!\n",
+            __func__, config->port_type);
+        return false;
+    }
+    if (config->port_override >= MAX_PORTS) {
+        qemu_log("vGT: %s failed due to the invalid port_override input: %d!\n",
+            __func__, config->port_override);
+        return false;
+    }
+    if (config->edid[126] != 0) {
+        qemu_log("vGT: %s failed because there is extended block in EDID! "
+            "(EDID[126] is not zero)\n", __func__);
+        return false;
+    }
+
+    return true;
+}
+
+static void config_hvm_monitors(vgt_monitor_info_t *config)
+{
+    const char *path_prefix = "/sys/kernel/vgt/vm";
+    FILE *fp;
+    char file_name[MAX_FILE_NAME_LENGTH];
+    int ret;
+
+    // override
+    snprintf(file_name, MAX_FILE_NAME_LENGTH, "%s%d/PORT_%c/port_override",
+        path_prefix, xen_domid, 'A' + config->port_type);
+    if ((fp = fopen(file_name, "w")) == NULL) {
+        qemu_log("vGT: %s failed to open file %s! errno = %d\n",
+            __func__, file_name, errno);
+        return;
+    }
+    fprintf(fp, "PORT_%c", 'A' + config->port_override);
+    if (fclose(fp) != 0) {
+        qemu_log("vGT: %s failed to close file: errno = %d\n", __func__, errno);
+    }
+
+    // type
+    snprintf(file_name, MAX_FILE_NAME_LENGTH, "%s%d/PORT_%c/type",
+        path_prefix, xen_domid, 'A' + config->port_type);
+    if ((fp = fopen(file_name, "w")) == NULL) {
+        qemu_log("vGT: %s failed to open file %s! errno = %d\n",
+            __func__, file_name, errno);
+        return;
+    }
+    fprintf(fp, "%d", port_info_to_type(config->port_is_dp, config->port_type));
+    if (fclose(fp) != 0) {
+        qemu_log("vGT: %s failed to close file: errno = %d\n", __func__, errno);
+    }
+
+    // edid
+    snprintf(file_name, MAX_FILE_NAME_LENGTH, "%s%d/PORT_%c/edid",
+        path_prefix, xen_domid, 'A' + config->port_type);
+    if ((fp = fopen(file_name, "w")) == NULL) {
+        qemu_log("vGT: %s failed to open file %s! errno = %d\n",
+            __func__, file_name, errno);
+        return;
+    }
+    ret = fwrite(config->edid, 1, EDID_SIZE, fp);
+    if (ret != EDID_SIZE) {
+        qemu_log("vGT: %s failed to write EDID with returned size %d: "
+            "errno = %d\n", __func__, ret, errno);
+    }
+    if (fclose(fp) != 0) {
+        qemu_log("vGT: %s failed to close file: errno = %d\n", __func__, errno);
+    }
+
+    // flush result to port structure
+    snprintf(file_name, MAX_FILE_NAME_LENGTH, "%s%d/PORT_%c/connection",
+        path_prefix, xen_domid, 'A' + config->port_type);
+    if ((fp = fopen(file_name, "w")) == NULL) {
+        qemu_log("vGT: %s failed to open file %s! errno = %d\n",
+            __func__, file_name, errno);
+        return;
+    }
+    fprintf(fp, "flush");
+    if (fclose(fp) != 0) {
+        qemu_log("vGT: %s failed to close file: errno = %d\n", __func__, errno);
+    }
+}
+
+#define CTOI(chr) \
+    (chr >= '0' && chr <= '9' ? chr - '0' : \
+    (chr >= 'a' && chr <= 'f' ? chr - 'a' + 10 :\
+    (chr >= 'A' && chr <= 'F' ? chr - 'A' + 10 : -1)))
+
+static int get_byte_from_txt_file(FILE *file, const char *file_name)
+{
+    int i;
+    int val[2];
+
+    for (i = 0; i < 2; ++ i) {
+        do {
+            unsigned char buf;
+            if (fread(&buf, 1, 1, file) != 1) {
+                qemu_log("vGT: %s failed to get byte from text file %s with errno: %d!\n",
+                    __func__, file_name, errno);
+                return -1;
+            }
+
+            if (buf == '#') {
+                // ignore comments
+                int ret;
+                while (((ret = fread(&buf, 1, 1, file)) == 1) && (buf != '\n')) ;
+                if (ret != 1) {
+                    qemu_log("vGT: %s failed to proceed after comment string "
+                            "from text file %s with errno: %d!\n",
+                            __func__, file_name, errno);
+                    return -1;
+                }
+            }
+
+            val[i] = CTOI(buf);
+        } while (val[i] == -1);
+    }
+
+    return ((val[0] << 4) | val[1]);
+}
+
+static int get_config_header(unsigned char *buf, FILE *file, const char *file_name)
+{
+    int ret;
+    unsigned char chr;
+
+    if (fread(&chr, 1, 1, file) != 1) {
+        qemu_log("vGT: %s failed to get byte from text file %s with errno: %d!\n",
+            __func__, file_name, errno);
+        return -1;
+    }
+
+    if (chr == '#') {
+        // it is text format input.
+        while (((ret = fread(&chr, 1, 1, file)) == 1) && (chr != '\n')) ;
+        if (ret != 1) {
+            qemu_log("vGT: %s failed to proceed after comment string "
+                "from file %s with errno: %d!\n",
+                __func__, file_name, errno);
+            return -1;
+        }
+        ret = get_byte_from_txt_file(file, file_name);
+        buf[0] = 1;
+        buf[1] = (ret & 0xf);
+    } else {
+        if ((ret = fread(&buf[0], 1, 2, file)) != 2) {
+            qemu_log("vGT: %s failed to read file %s! "
+                "Expect to read %d bytes but only got %d bytes! errno: %d\n",
+                __func__, file_name, 2, ret, errno);
+            return -1;
+        }
+
+        if (buf[0] != 0) {
+            // it is text format input.
+            buf[1] -= '0';
+        }
+    }
+
+    return 0;
+}
+
+static void config_vgt_guest_monitors(void)
+{
+    FILE *monitor_config_f;
+    unsigned char buf[4];
+    vgt_monitor_info_t monitor_configs[MAX_INPUT_NUM];
+    bool text_mode;
+    int input_items;
+    int ret, i;
+
+    if (!vgt_monitor_config_file) {
+        return;
+    }
+
+    if ((monitor_config_f = fopen(vgt_monitor_config_file, "r")) == NULL) {
+        qemu_log("vGT: %s failed to open file %s! errno = %d\n",
+            __func__, vgt_monitor_config_file, errno);
+        return;
+    }
+
+    if (get_config_header(buf, monitor_config_f, vgt_monitor_config_file) != 0) {
+        goto finish_config;
+    }
+
+    text_mode = !!buf[0];
+    input_items = buf[1];
+
+    if (input_items <= 0 || input_items > MAX_INPUT_NUM) {
+        qemu_log("vGT: %s, Out of range input of the number of items! "
+            "Should be [1 - 3] but input is %d\n", __func__, input_items);
+        goto finish_config;
+    }
+
+    if (text_mode) {
+        unsigned int total = sizeof(vgt_monitor_info_t) * input_items;
+        unsigned char *p = (unsigned char *)monitor_configs;
+        for (i = 0; i < total; ++i, ++p) {
+            unsigned int val = get_byte_from_txt_file(monitor_config_f,
+                vgt_monitor_config_file);
+            if (val == -1) {
+                break;
+            } else {
+                *p = val;
+            }
+        }
+        if (i < total) {
+            goto finish_config;
+        }
+    } else {
+        unsigned int total = sizeof(vgt_monitor_info_t) * input_items;
+        ret = fread(monitor_configs, sizeof(vgt_monitor_info_t), input_items,
+                    monitor_config_f);
+        if (ret != total) {
+            qemu_log("vGT: %s failed to read file %s! "
+                "Expect to read %d bytes but only got %d bytes! errno: %d\n",
+                 __func__, vgt_monitor_config_file, total, ret, errno);
+            goto finish_config;
+        }
+    }
+
+    for (i = 0; i < input_items; ++ i) {
+        if (validate_monitor_configs(&monitor_configs[i]) == false) {
+            qemu_log("vGT: %s the monitor config[%d] input from %s is not valid!\n",
+                __func__, i, vgt_monitor_config_file);
+            goto finish_config;
+        }
+    }
+    for (i = 0; i < input_items; ++ i) {
+        config_hvm_monitors(&monitor_configs[i]);
+    }
+
+finish_config:
+    if (fclose(monitor_config_f) != 0) {
+        qemu_log("vGT: %s failed to close file %s: errno = %d\n", __func__,
+            vgt_monitor_config_file, errno);
+    }
+    return;
+}
+
+/*
+ *  Inform vGT driver to create a vGT instance
+ */
+static void create_vgt_instance(void)
+{
+    /* FIXME: this should be substituded as a environment variable */
+    const char *path = "/sys/kernel/vgt/control/create_vgt_instance";
+    FILE *vgt_file;
+    int err = 0;
+
+    qemu_log("vGT: %s: domid=%d, low_gm_sz=%dMB, high_gm_sz=%dMB, "
+        "fence_sz=%d, vga_sz=%dMB, vgt_primary=%d\n", __func__, xen_domid,
+        vgt_low_gm_sz, vgt_high_gm_sz, vgt_fence_sz, 8, vgt_primary);
+    if (vgt_low_gm_sz <= 0 || vgt_high_gm_sz <=0 ||
+            vgt_primary < -1 || vgt_primary > 1 ||
+            vgt_fence_sz <=0) {
+        qemu_log("vGT: %s failed: invalid parameters!\n", __func__);
+        abort();
+    }
+
+    if ((vgt_file = fopen(path, "w")) == NULL) {
+        err = errno;
+        qemu_log("vGT: open %s failed\n", path);
+    }
+    /* The format of the string is:
+     * domid,aperture_size,gm_size,fence_size. This means we want the vgt
+     * driver to create a vgt instanc for Domain domid with the required
+     * parameters. NOTE: aperture_size and gm_size are in MB.
+     */
+    if (!err && fprintf(vgt_file, "%d,%u,%u,%u,%d\n", xen_domid,
+        vgt_low_gm_sz, vgt_high_gm_sz, vgt_fence_sz, vgt_primary) < 0) {
+        err = errno;
+    }
+
+    if (!err && fclose(vgt_file) != 0) {
+        err = errno;
+    }
+
+    if (err) {
+        qemu_log("vGT: %s failed: errno=%d\n", __func__, err);
+        exit(-1);
+    }
+
+    config_vgt_guest_monitors();
+}
+
+/*
+ *  Inform vGT driver to close a vGT instance
+ */
+void destroy_vgt_instance(void)
+{
+    const char *path = "/sys/kernel/vgt/control/create_vgt_instance";
+    FILE *vgt_file;
+    int err = 0;
+
+    qemu_log("vGT: %s: domid=%d\n", __func__, xen_domid);
+
+    if ((vgt_file = fopen(path, "w")) == NULL) {
+        qemu_log("vGT: open %s failed\n", path);
+        err = errno;
+    }
+
+    /* -domid means we want the vgt driver to free the vgt instance
+     * of Domain domid.
+     * */
+    if (!err && fprintf(vgt_file, "%d\n", -xen_domid) < 0) {
+        err = errno;
+    }
+
+    if (!err && fclose(vgt_file) != 0) {
+        err = errno;
+    }
+
+    if (err) {
+        qemu_log("vGT: %s: failed: errno=%d\n", __func__, err);
+        exit(-1);
+    }
+}
+
+static int pch_map_irq(PCIDevice *pci_dev, int irq_num)
+{
+    return irq_num;
+}
+
+void vgt_bridge_pci_write(PCIDevice *dev, uint32_t addr, uint32_t val, int len)
+{
+#if 0
+    vgt_vga_state_t *o = DO_UPCAST(vgt_vga_state_t, dev, dev);
+#endif
+    //assert(dev->devfn == 0x00);
+
+    PT_LOG_DEV(dev, "vGT Config Write: addr=%x len=%x val=%x\n", addr, len, val);
+
+    switch (addr) {
+#if 0
+        case 0x58:        // PAVPC Offset
+            xen_host_pci_set_block(o->host_dev, addr, val, len);
+            break;
+#endif
+	/*case 0xf8:
+    		qemu_log("mapping VGA RAM at 0x%x\n",val);
+            vga_map(pci_find_device(0,2,0), 0, val, vgt_legacy_vga_ram_size, 0);
+            break;*/
+        default:
+            pci_default_write_config(dev, addr, val, len);
+    }
+}
+
+static void vgt_bridge_pci_conf_init_from_host(PCIDevice *dev,
+        uint32_t addr, int len)
+{
+    struct pci_dev *host_dev;
+
+    if (len > 4) {
+        PT_LOG_DEV(dev, "WARNIGN: length %x too large for config addr %x, ignore init\n",
+                len, addr);
+        return;
+    }
+
+    /* FIXME: need a better scheme to grab the root complex. This
+     * only for a single VM scenario.
+    */
+    if ( !(host_dev = pt_pci_get_dev(0, 0, 0))) {
+        qemu_log(" Error, failed to get host PCI device\n");
+    }
+
+    *((u32*)(dev->config + addr)) = pt_pci_host_read(host_dev, addr, len);
+}
+
+static void vgt_host_bridge_cap_init(PCIDevice *dev)
+{
+    assert(dev->devfn == 0x00);
+    u32 cap_ptr = 0;
+    struct pci_dev *host_dev;
+
+    host_dev = pt_pci_get_dev(0, 0, 0);
+    cap_ptr = pt_pci_host_read(host_dev, 0x34, 1);
+
+    while (cap_ptr !=0) {
+        vgt_bridge_pci_conf_init_from_host(dev, cap_ptr, 4); /* capability */
+        vgt_bridge_pci_conf_init_from_host(dev, cap_ptr + 4, 4); /* capability */
+        vgt_bridge_pci_conf_init_from_host(dev, cap_ptr + 8, 4); /* capability */
+        vgt_bridge_pci_conf_init_from_host(dev, cap_ptr + 12, 4); /* capability */
+        //PT_LOG_DEV(pci_dev, "Add vgt host bridge capability: offset=0x%x, cap=0x%x\n", cap_ptr,
+        //    pt_pci_host_read(0, PCI_SLOT(pci_dev->devfn), 0, cap_ptr, 1) & 0xFF );
+        cap_ptr = pt_pci_host_read(host_dev, cap_ptr +1, 1);
+    }
+
+}
+
+
+static void vgt_vga_map(PCIDevice *pci_dev, int region_num,
+                    uint32_t addr, uint32_t size, int type)
+{
+    vga_map(pci_find_device(0,2,0), region_num, addr, size, type);
+}
+void vgt_bridge_pci_conf_init(PCIDevice *pci_dev)
+{
+    qemu_log("vgt_bridge_pci_conf_init\n");
+    qemu_log("vendor id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x00));
+    vgt_bridge_pci_conf_init_from_host(pci_dev, 0x00, 2); /* vendor id */
+    qemu_log("vendor id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x00));
+    qemu_log("device id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x02));
+    vgt_bridge_pci_conf_init_from_host(pci_dev, 0x02, 2); /* device id */
+    qemu_log("device id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x02));
+    vgt_bridge_pci_conf_init_from_host(pci_dev, 0x06, 2); /* status */
+    vgt_bridge_pci_conf_init_from_host(pci_dev, 0x08, 2); /* revision id */
+    vgt_bridge_pci_conf_init_from_host(pci_dev, 0x34, 1); /* capability */
+    //vgt_host_bridge_cap_init(pci_dev);
+    vgt_bridge_pci_conf_init_from_host(pci_dev, 0x50, 2); /* SNB: processor graphics control register */
+    vgt_bridge_pci_conf_init_from_host(pci_dev, 0x52, 2); /* processor graphics control register */
+    vgt_bridge_pci_conf_init_from_host(pci_dev, 0xa, 2); /* class code */
+
+}
+
+uint32_t vgt_bridge_pci_read(PCIDevice *pci_dev, uint32_t config_addr, int len)
+{
+    uint32_t val;
+
+    val = pci_default_read_config(pci_dev, config_addr, len);
+    PT_LOG_DEV(pci_dev, "addr=%x len=%x val=%x\n", config_addr, len, val);
+
+    return val;
+}
+
+static void vgt_cleanupfn(PCIDevice *dev)
+{
+    vgt_vga_state_t *d = DO_UPCAST(vgt_vga_state_t, dev, dev);
+
+    if (d->instance_created) {
+        destroy_vgt_instance();
+    }
+}
+
+static void vgt_cleanupfn2(void *unused)
+{
+    destroy_vgt_instance();
+}
+
+/*static int vgt_initfn(PCIDevice *dev)
+{
+    vgt_vga_state_t *d = DO_UPCAST(vgt_vga_state_t, dev, dev);
+
+    qemu_log("vgt_initfn\n");
+    d->instance_created = FALSE;
+
+    create_vgt_instance();
+    return 0;
+}*/
+
+void xengt_vga_init(PCIBus *pci_bus, ram_addr_t vga_ram_addr, int vga_ram_size)
+{
+    int ret;
+    struct pci_dev *host_dev;
+    uint16_t vid, did;
+    uint8_t  rid;
+
+    if (!(host_dev = pt_pci_get_dev(0, 0, 0))) {
+        qemu_log(" Error, failed to get host PCI device\n");
+        return;
+    }
+
+    vid = pt_pci_host_read(host_dev, PCI_VENDOR_ID, 2);
+    did = pt_pci_host_read(host_dev, PCI_DEVICE_ID, 2);
+    rid = pt_pci_host_read(host_dev, PCI_REVISION, 1);
+    if (vid != PCI_VENDOR_ID_INTEL) {
+        qemu_log(" Error, vga-xengt is only supported on Intel GPUs\n");
+        return;
+    }
+
+    pci_isa_bridge_init(pci_bus, PCI_DEVFN(0x1f, 0), vid,did,rid,
+                                   pch_map_irq, "xengt-isa");
+    pci_register_io_region(pci_find_device(0,0x1f,0), 0, vga_ram_size,
+                           PCI_ADDRESS_SPACE_MEM_PREFETCH, vgt_vga_map);
+
+    /* Note I have not set the class code of the bridge! */
+    qemu_log("Create xengt ISA bridge successfully\n");
+    ret = pci_vga_init(pci_bus, PCI_DEVFN(0x2,0),
+			 phys_ram_base + vga_ram_addr,
+                         vga_ram_addr, vga_ram_size, 0, 0);
+
+    vgt_legacy_vga_ram_size = vga_ram_size;
+    if (ret) {
+        qemu_log("Warning: vga-xengt not available\n");
+        return;
+    }
+
+    create_vgt_instance();
+    qemu_register_exit(vgt_cleanupfn2, NULL);
+    qemu_log("Create xengt VGA successfully\n");
+    return;
+}
+/*
+static void vgt_class_initfn(ObjectClass *klass, void *data)
+{
+    qemu_log("vgt_class_initfn\n");
+    DeviceClass *dc = DEVICE_CLASS(klass);
+    PCIDeviceClass *ic = PCI_DEVICE_CLASS(klass);
+    ic->init = vgt_initfn;
+    dc->reset = vgt_reset;
+    ic->exit = vgt_cleanupfn;
+    dc->vmsd = &vmstate_vga_common;
+}
+
+static TypeInfo vgt_info = {
+    .name          = "xengt-vga",
+    .parent        = TYPE_PCI_DEVICE,
+    .instance_size = sizeof(vgt_vga_state_t),
+    .class_init    = vgt_class_initfn,
+};
+
+static TypeInfo isa_info = {
+    .name          = "xengt-isa",
+    .parent        = TYPE_PCI_DEVICE,
+    .instance_size = sizeof(vgt_vga_state_t),
+};
+
+static void vgt_register_types(void)
+{
+    type_register_static(&vgt_info);
+    type_register_static(&isa_info);
+}
+
+type_init(vgt_register_types)
+*/
diff --git a/hw/vga-xengt.h b/hw/vga-xengt.h
new file mode 100644
index 0000000..eef464c
--- /dev/null
+++ b/hw/vga-xengt.h
@@ -0,0 +1,19 @@
+#ifndef __XENGT_H__
+#define __XENGT_H__
+
+void xengt_vga_init(PCIBus *pci_bus, ram_addr_t vga_ram_addr, int
+		vga_ram_size);
+void vgt_bridge_pci_conf_init(PCIDevice *dev);
+void vgt_bridge_pci_write(PCIDevice *dev, uint32_t addr, uint32_t val, int len);
+uint32_t vgt_bridge_pci_read(PCIDevice *pci_dev, uint32_t config_addr, int len);
+void destroy_vgt_instance(void);
+/* Convert from a base type to a parent type, with compile time checking.  */
+#ifdef __GNUC__
+#define DO_UPCAST(type, field, dev) ( __extension__ ( { \
+    char __attribute__((unused)) offset_must_be_zero[ \
+        -offsetof(type, field)]; \
+    container_of(dev, type, field);}))
+#else
+#define DO_UPCAST(type, field, dev) container_of(dev, type, field)
+#endif
+#endif
diff --git a/i386-dm/helper2.c b/i386-dm/helper2.c
index 54962bd..9244b52 100644
--- a/i386-dm/helper2.c
+++ b/i386-dm/helper2.c
@@ -63,6 +63,7 @@
 #include "hw/pc.h"
 #include "net.h"
 #include "privsep.h"
+#include "hw/vga-xengt.h"
 
 //#define DEBUG_MMU
 
@@ -668,7 +669,7 @@ int main_loop(void)
 void destroy_hvm_domain(void)
 {
     int sts;
- 
+
     sts = xc_domain_shutdown(xc_handle, domid, SHUTDOWN_poweroff);
     if (sts != 0)
         fprintf(logfile, "? xc_domain_shutdown failed to issue poweroff, "
diff --git a/sysemu.h b/sysemu.h
index 92b7411..794c73a 100644
--- a/sysemu.h
+++ b/sysemu.h
@@ -89,6 +89,7 @@ extern int cirrus_vga_enabled;
 extern int std_vga_enabled;
 extern int vmsvga_enabled;
 extern int vgpu_enabled;
+extern int xengt_vga_enabled;
 extern int gfx_passthru;
 extern int graphic_width;
 extern int graphic_height;
diff --git a/vl.c b/vl.c
index fa6bd40..82bf379 100644
--- a/vl.c
+++ b/vl.c
@@ -241,6 +241,7 @@ int cirrus_vga_enabled = 1;
 int std_vga_enabled = 0;
 int vmsvga_enabled = 0;
 int vgpu_enabled = 0;
+int xengt_vga_enabled = 0;
 int gfx_passthru = 0;
 #ifdef TARGET_SPARC
 int graphic_width = 1024;
@@ -3134,6 +3135,16 @@ typedef struct QEMUResetEntry {
 } QEMUResetEntry;
 
 static QEMUResetEntry *first_reset_entry;
+
+typedef struct QEMUExitEntry {
+    QEMUExitHandler *func;
+    void *opaque;
+    struct QEMUExitEntry *next;
+} QEMUExitEntry;
+
+static QEMUExitEntry *first_exit_entry;
+
+static volatile sig_atomic_t sigterm_received;
 static int reset_requested;
 static int shutdown_requested;
 static int powerdown_requested;
@@ -3181,6 +3192,20 @@ void qemu_register_reset(QEMUResetHandler *func, void *opaque)
     *pre = re;
 }
 
+void qemu_register_exit(QEMUExitHandler *func, void *opaque)
+{
+    QEMUExitEntry **pre, *re;
+
+    pre = &first_exit_entry;
+    while (*pre != NULL)
+        pre = &(*pre)->next;
+    re = qemu_mallocz(sizeof(QEMUExitEntry));
+    re->func = func;
+    re->opaque = opaque;
+    re->next = NULL;
+    *pre = re;
+}
+
 void qemu_system_reset(void)
 {
     QEMUResetEntry *re;
@@ -3191,6 +3216,15 @@ void qemu_system_reset(void)
     }
 }
 
+static void qemu_handle_exit(void)
+{
+    QEMUExitEntry *re;
+
+    for(re = first_exit_entry; re != NULL; re = re->next) {
+        re->func(re->opaque);
+    }
+}
+
 void qemu_system_reset_request(void)
 {
     if (no_reboot) {
@@ -3287,6 +3321,11 @@ void main_loop_wait(int timeout)
 
     qemu_bh_update_timeout(&timeout);
 
+    if (sigterm_received) {
+        qemu_handle_exit();
+        exit(0);
+    }
+
     host_main_loop_wait(&timeout);
 
     /* poll any events */
@@ -3836,11 +3875,16 @@ enum {
     QEMU_OPTION_videoram,
     QEMU_OPTION_std_vga,
     QEMU_OPTION_vgpu,
+    QEMU_OPTION_xengt,
     QEMU_OPTION_domid,
     QEMU_OPTION_domainname,
     QEMU_OPTION_acpi,
     QEMU_OPTION_vcpus,
     QEMU_OPTION_vcpu_avail,
+    QEMU_OPTION_vgt_low_gm_sz,
+    QEMU_OPTION_vgt_high_gm_sz,
+    QEMU_OPTION_vgt_fence_sz,
+    QEMU_OPTION_vgt_monitor_config_file,
 
     /* Debug/Expert options: */
     QEMU_OPTION_serial,
@@ -4011,6 +4055,7 @@ static const QEMUOption qemu_options[] = {
     /* Xen tree options: */
     { "std-vga", 0, QEMU_OPTION_std_vga },
     { "vgpu", 0, QEMU_OPTION_vgpu },
+    { "xengt", 0, QEMU_OPTION_xengt },
     { "videoram", HAS_ARG, QEMU_OPTION_videoram },
     { "d", HAS_ARG, QEMU_OPTION_domid }, /* deprecated; for xend compatibility */
     { "domid", HAS_ARG, QEMU_OPTION_domid },
@@ -4029,6 +4074,10 @@ static const QEMUOption qemu_options[] = {
     { "xen-create", 0, QEMU_OPTION_xen_create },
     { "xen-attach", 0, QEMU_OPTION_xen_attach },
 #endif
+    { "vgt_low_gm_sz", HAS_ARG, QEMU_OPTION_vgt_low_gm_sz },
+    { "vgt_high_gm_sz", HAS_ARG, QEMU_OPTION_vgt_high_gm_sz },
+    { "vgt_fence_sz", HAS_ARG, QEMU_OPTION_vgt_fence_sz },
+    { "vgt_monitor_config_file", HAS_ARG, QEMU_OPTION_vgt_monitor_config_file },
 
 #if defined(TARGET_ARM)
     { "old-param", 0, QEMU_OPTION_old_param },
@@ -4194,32 +4243,44 @@ static void select_vgahw (const char *p)
         cirrus_vga_enabled = 0;
         vmsvga_enabled = 0;
         vgpu_enabled = 0;
+        xengt_vga_enabled = 0;
     } else if (strstart(p, "cirrus", &opts)) {
         cirrus_vga_enabled = 1;
         std_vga_enabled = 0;
         vmsvga_enabled = 0;
         vgpu_enabled = 0;
+        xengt_vga_enabled = 0;
     } else if (strstart(p, "vmware", &opts)) {
         cirrus_vga_enabled = 0;
         std_vga_enabled = 0;
         vmsvga_enabled = 1;
         vgpu_enabled = 0;
+        xengt_vga_enabled = 0;
     } else if (strstart(p, "passthrough", &opts)) {
         cirrus_vga_enabled = 0;
         std_vga_enabled = 0;
         vmsvga_enabled = 0;
         gfx_passthru = 1;
         vgpu_enabled = 0;
+        xengt_vga_enabled = 0;
     } else if (strstart(p, "vgpu", &opts)) {
         cirrus_vga_enabled = 0;
         std_vga_enabled = 0;
         vmsvga_enabled = 0;
         vgpu_enabled = 1;
+        xengt_vga_enabled = 0;
+    } else if (strstart(p, "xengt", &opts)) {
+        cirrus_vga_enabled = 0;
+        std_vga_enabled = 0;
+        vmsvga_enabled = 0;
+        vgpu_enabled = 0;
+        xengt_vga_enabled = 1;
     } else if (strstart(p, "none", &opts)) {
         cirrus_vga_enabled = 0;
         std_vga_enabled = 0;
         vmsvga_enabled = 0;
         vgpu_enabled = 0;
+        xengt_vga_enabled = 0;
     } else {
     invalid_vga:
         fprintf(stderr, "Unknown vga type: %s\n", p);
@@ -4269,10 +4330,17 @@ static int qemu_uuid_parse(const char *str, uint8_t *uuid)
 
 #ifndef _WIN32
 
+#ifdef CONFIG_DM
+static void termsig_handler(int signal)
+{
+    sigterm_received = 1;
+}
+#else
 static void termsig_handler(int signal)
 {
     qemu_system_shutdown_request();
 }
+#endif
 
 static void termsig_setup(void)
 {
@@ -4280,9 +4348,11 @@ static void termsig_setup(void)
 
     memset(&act, 0, sizeof(act));
     act.sa_handler = termsig_handler;
+    sigaction(SIGTERM, &act, NULL);
+#ifndef CONFIG_DM
     sigaction(SIGINT,  &act, NULL);
     sigaction(SIGHUP,  &act, NULL);
-    sigaction(SIGTERM, &act, NULL);
+#endif
 }
 
 #endif
@@ -4983,6 +5053,32 @@ int main(int argc, char **argv, char **envp)
             case QEMU_OPTION_vgpu:
                 select_vgahw("vgpu");
                 break;
+            case QEMU_OPTION_xengt:
+                select_vgahw("xengt");
+                break;
+            case QEMU_OPTION_vgt_low_gm_sz:
+                {
+                    char *ptr;
+                    vgt_low_gm_sz = strtol(optarg,&ptr,10);
+                }
+                break;
+            case QEMU_OPTION_vgt_high_gm_sz:
+                {
+                    char *ptr;
+                    vgt_high_gm_sz = strtol(optarg,&ptr,10);
+                }
+                break;
+            case QEMU_OPTION_vgt_fence_sz:
+                {
+                    char *ptr;
+                    vgt_fence_sz = strtol(optarg,&ptr,10);
+                }
+                break;
+            case QEMU_OPTION_vgt_monitor_config_file:
+                {
+                    vgt_monitor_config_file = optarg;
+                }
+                break;
             case QEMU_OPTION_disable_opengl:
                 opengl_enabled = 0;
                 break;
@@ -5476,11 +5572,9 @@ int main(int argc, char **argv, char **envp)
     init_privxsh();
 
 #ifndef _WIN32
-#ifndef CONFIG_DM
     /* must be after terminal init, SDL library changes signal handlers */
     termsig_setup();
 #endif
-#endif
 
     /* Maintain compatibility with multiple stdio monitors */
     if (!strcmp(monitor_device,"stdio")) {
