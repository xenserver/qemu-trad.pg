diff --git a/console.h b/console.h
index c26eeaa..7cf2242 100644
--- a/console.h
+++ b/console.h
@@ -317,6 +317,7 @@ void vnc_display_close(DisplayState *ds);
 int vnc_display_open(DisplayState *ds, const char *display);
 int vnc_display_password(DisplayState *ds, const char *password);
 void do_info_vnc(void);
+void vnc_keymap_change(char *keymap);
 
 /* curses.c */
 void curses_display_init(DisplayState *ds, int full_screen);
diff --git a/sysemu.h b/sysemu.h
index 1edfb9a..fcc75b1 100644
--- a/sysemu.h
+++ b/sysemu.h
@@ -90,7 +90,7 @@ extern int graphic_width;
 extern int graphic_height;
 extern int graphic_depth;
 extern int nographic;
-extern const char *keyboard_layout;
+extern char *keyboard_layout;
 extern int win2k_install_hack;
 extern int rtc_td_hack;
 extern int alt_grab;
diff --git a/vl.c b/vl.c
index 61b87d5..b8ea400 100644
--- a/vl.c
+++ b/vl.c
@@ -205,7 +205,7 @@ static DisplayState *display_state;
 int nographic;
 static int curses;
 static int sdl;
-const char* keyboard_layout = NULL;
+char* keyboard_layout = NULL;
 int64_t ticks_per_sec;
 ram_addr_t ram_size;
 int nb_nics;
@@ -5279,7 +5279,7 @@ int main(int argc, char **argv, char **envp)
                 autostart = 0;
                 break;
 	    case QEMU_OPTION_k:
-		keyboard_layout = optarg;
+		keyboard_layout = strdup(optarg);
 		break;
             case QEMU_OPTION_localtime:
                 rtc_utc = 0;
diff --git a/vnc.c b/vnc.c
index f83969b..f4f263a 100644
--- a/vnc.c
+++ b/vnc.c
@@ -2472,6 +2472,28 @@ static void vnc_listen_read(void *opaque)
     }
 }
 
+void vnc_keymap_change(char *keymap)
+{
+    kbd_layout_t *new_layout;
+
+    if (keyboard_layout && !strcmp(keymap, keyboard_layout))
+        return;
+
+    new_layout = init_keyboard_layout(keymap);
+    if (!new_layout) {
+        fprintf(stderr, "Failed to initialise new keyboard layout\n");
+        return;
+    }
+
+    fprintf(stderr, "Initialise new keyboard layout %s\n", keymap);
+
+    qemu_free(keyboard_layout);
+    qemu_free(vnc_display->kbd_layout);
+
+    keyboard_layout = strdup(keymap);
+    vnc_display->kbd_layout = new_layout;
+}
+
 void vnc_display_init(DisplayState *ds)
 {
     VncDisplay *vs = qemu_mallocz(sizeof(*vs));
diff --git a/xenstore.c b/xenstore.c
index 42daefe..00ecb2b 100644
--- a/xenstore.c
+++ b/xenstore.c
@@ -23,11 +23,16 @@
 #include "qemu-timer.h"
 #include "qemu-xen.h"
 #include "xen_backend.h"
+#include "console.h"
+
+/* The token used to identify the keymap watch. */
+#define KEYMAP_TOKEN "keymap"
 
 struct xs_handle *xsh = NULL;
 static char *media_filename[MAX_DRIVES+1];
 static QEMUTimer *insert_timer = NULL;
 static char *xenbus_param_paths[MAX_DRIVES+1];
+static char *guest_path;
 
 int xenstore_find_device(BlockDriverState *bs)
 {
@@ -495,6 +500,8 @@ void xenstore_parse_domain_config(int hvm_domid)
     unsigned int len, num, hd_index, pci_devid = 0;
     BlockDriverState *bs;
     BlockDriver *format;
+    char *target_path = NULL, *target_domids = NULL;
+    int target_domid = 0;
 
     /* Read-only handling for image files */
     char *mode = NULL;
@@ -534,6 +541,21 @@ void xenstore_parse_domain_config(int hvm_domid)
         goto out;
     }
 
+#ifndef CONFIG_STUBDOM
+    if (pasprintf(&buf, "%s/target", danger_path) != -1)
+        target_domids = xs_read(xsh, XBT_NULL, buf, &len);
+    if (target_domids) {
+        target_domid = atoi(target_domids);
+        target_path = xs_get_domain_path(xsh, target_domid);
+        guest_path = strdup(target_path);
+    } else {
+        guest_path = strdup(danger_path);
+    }
+
+    if (pasprintf(&buf, "%s/keymap", guest_path) != -1)
+        xs_watch(xsh, buf, KEYMAP_TOKEN); // Ignore failure -- we can muddle on.
+#endif
+
     if (pasprintf(&danger_buf, "%s/device/vbd", danger_path) == -1)
         goto out;
 
@@ -842,6 +864,8 @@ void xenstore_parse_domain_config(int hvm_domid)
     free(danger_buf);
     free(danger_path);
     free(e_danger);
+    free(target_path);
+    free(target_domids);
     free(drv);
     return;
 }
@@ -1278,6 +1302,14 @@ void xenstore_process_event(void *opaque)
         goto out;
     }
 
+    if (!strcmp(vec[XS_WATCH_TOKEN], KEYMAP_TOKEN)) {
+	image = xs_read(xsh, XBT_NULL, vec[XS_WATCH_PATH], &len);
+ 	if (image == NULL)
+ 	    goto out;
+	vnc_keymap_change(image);
+	goto out;
+    }
+
     if (!strcmp(vec[XS_WATCH_TOKEN], "logdirty")) {
         xenstore_process_logdirty_event();
         goto out;
