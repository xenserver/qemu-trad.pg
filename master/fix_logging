diff --git a/hw/vga-xengt.c b/hw/vga-xengt.c
index 40b01c1..b4436b3 100644
--- a/hw/vga-xengt.c
+++ b/hw/vga-xengt.c
@@ -157,61 +157,61 @@ static void config_hvm_monitors(void)
     // override
     snprintf(file_name, MAX_FILE_NAME_LENGTH, "%s%d/PORT_%c/port_override",
         path_prefix, xen_domid, 'A' + config->port_type);
-    printf("writing %s\n", file_name);
+    qemu_log("writing %s\n", file_name);
     if ((fp = fopen(file_name, "w")) == NULL) {
-        printf("vGT: %s failed to open file %s! errno = %d\n",
-            __func__, file_name, errno);
+        qemu_log("vGT: %s failed to open file %s! errno = %d\n",
+                 __func__, file_name, errno);
         return;
     }
     fprintf(fp, "PORT_%c", 'A' + config->port_override);
     if (fclose(fp) != 0) {
-        printf("vGT: %s failed to close file: errno = %d\n", __func__, errno);
+        qemu_log("vGT: %s failed to close file: errno = %d\n", __func__, errno);
     }
 
     // type
     snprintf(file_name, MAX_FILE_NAME_LENGTH, "%s%d/PORT_%c/type",
         path_prefix, xen_domid, 'A' + config->port_type);
-    printf("writing %s\n", file_name);
+    qemu_log("writing %s\n", file_name);
     if ((fp = fopen(file_name, "w")) == NULL) {
-        printf("vGT: %s failed to open file %s! errno = %d\n",
-            __func__, file_name, errno);
+        qemu_log("vGT: %s failed to open file %s! errno = %d\n",
+                 __func__, file_name, errno);
         return;
     }
     fprintf(fp, "%d", port_info_to_type(config->port_is_dp, config->port_type));
     if (fclose(fp) != 0) {
-        printf("vGT: %s failed to close file: errno = %d\n", __func__, errno);
+        qemu_log("vGT: %s failed to close file: errno = %d\n", __func__, errno);
     }
 
     // edid
     snprintf(file_name, MAX_FILE_NAME_LENGTH, "%s%d/PORT_%c/edid",
         path_prefix, xen_domid, 'A' + config->port_type);
-    printf("writing %s\n", file_name);
+    qemu_log("writing %s\n", file_name);
     if ((fp = fopen(file_name, "w")) == NULL) {
-        printf("vGT: %s failed to open file %s! errno = %d\n",
-            __func__, file_name, errno);
+        qemu_log("vGT: %s failed to open file %s! errno = %d\n",
+                 __func__, file_name, errno);
         return;
     }
     ret = fwrite(config->edid, 1, EDID_SIZE, fp);
     if (ret != EDID_SIZE) {
-        printf("vGT: %s failed to write EDID with returned size %d: "
-            "errno = %d\n", __func__, ret, errno);
+        qemu_log("vGT: %s failed to write EDID with returned size %d: "
+                "errno = %d\n", __func__, ret, errno);
     }
     if (fclose(fp) != 0) {
-        printf("vGT: %s failed to close file: errno = %d\n", __func__, errno);
+        qemu_log("vGT: %s failed to close file: errno = %d\n", __func__, errno);
     }
 
     // flush result to port structure
     snprintf(file_name, MAX_FILE_NAME_LENGTH, "%s%d/PORT_%c/connection",
         path_prefix, xen_domid, 'A' + config->port_type);
-    printf("writing %s\n", file_name);
+    qemu_log("writing %s\n", file_name);
     if ((fp = fopen(file_name, "w")) == NULL) {
-        printf("vGT: %s failed to open file %s! errno = %d\n",
-            __func__, file_name, errno);
+        qemu_log("vGT: %s failed to open file %s! errno = %d\n",
+                 __func__, file_name, errno);
         return;
     }
     fprintf(fp, "flush");
     if (fclose(fp) != 0) {
-        printf("vGT: %s failed to close file: errno = %d\n", __func__, errno);
+        qemu_log("vGT: %s failed to close file: errno = %d\n", __func__, errno);
     }
 }
 
@@ -254,7 +254,7 @@ static void create_vgt_instance(void)
     }
 
     if (err) {
-        printf("vGT: %s failed: errno=%d\n", __func__, err);
+        qemu_log("vGT: %s failed: errno=%d\n", __func__, err);
         exit(-1);
     }
 
@@ -270,10 +270,10 @@ void destroy_vgt_instance(void)
     FILE *vgt_file;
     int err = 0;
 
-    printf("vGT: %s: domid=%d\n", __func__, xen_domid);
+    qemu_log("vGT: %s: domid=%d\n", __func__, xen_domid);
 
     if ((vgt_file = fopen(path, "w")) == NULL) {
-        fprintf(stdout, "vGT: open %s failed\n", path);
+        qemu_log("vGT: open %s failed\n", path);
         err = errno;
     }
 
@@ -289,7 +289,7 @@ void destroy_vgt_instance(void)
     }
 
     if (err) {
-        printf("vGT: %s: failed: errno=%d\n", __func__, err);
+        qemu_log("vGT: %s: failed: errno=%d\n", __func__, err);
         exit(-1);
     }
 }
@@ -338,7 +338,7 @@ static void vgt_bridge_pci_conf_init_from_host(PCIDevice *dev,
      * only for a single VM scenario.
     */
     if ( !(host_dev = pt_pci_get_dev(0, 0, 0))) {
-        fprintf(stderr, " Error, failed to get host PCI device\n");
+        qemu_log("Error, failed to get host PCI device\n");
     }
 
     *((u32*)(dev->config + addr)) = pt_pci_host_read(host_dev, addr, len);
@@ -373,13 +373,13 @@ static void vgt_vga_map(PCIDevice *pci_dev, int region_num,
 }
 void vgt_bridge_pci_conf_init(PCIDevice *pci_dev)
 {
-    printf("vgt_bridge_pci_conf_init\n");
-    printf("vendor id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x00));
+    qemu_log("vgt_bridge_pci_conf_init\n");
+    qemu_log("vendor id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x00));
     vgt_bridge_pci_conf_init_from_host(pci_dev, 0x00, 2); /* vendor id */
-    printf("vendor id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x00));
-    printf("device id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x02));
+    qemu_log("vendor id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x00));
+    qemu_log("device id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x02));
     vgt_bridge_pci_conf_init_from_host(pci_dev, 0x02, 2); /* device id */
-    printf("device id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x02));
+    qemu_log("device id: %x\n", *(uint16_t *)((char *)pci_dev->config + 0x02));
     vgt_bridge_pci_conf_init_from_host(pci_dev, 0x06, 2); /* status */
     vgt_bridge_pci_conf_init_from_host(pci_dev, 0x08, 2); /* revision id */
     vgt_bridge_pci_conf_init_from_host(pci_dev, 0x34, 1); /* capability */
@@ -433,7 +433,7 @@ void xengt_vga_init(PCIBus *pci_bus, ram_addr_t vga_ram_addr, int vga_ram_size)
     uint8_t  rid;
 
     if (!(host_dev = pt_pci_get_dev(0, 0, 0))) {
-        fprintf(stderr, " Error, failed to get host PCI device\n");
+        qemu_log("Error, failed to get host PCI device\n");
         return;
     }
 
@@ -441,7 +441,7 @@ void xengt_vga_init(PCIBus *pci_bus, ram_addr_t vga_ram_addr, int vga_ram_size)
     did = pt_pci_host_read(host_dev, PCI_DEVICE_ID, 2);
     rid = pt_pci_host_read(host_dev, PCI_REVISION, 1);
     if (vid != PCI_VENDOR_ID_INTEL) {
-        fprintf(stderr, " Error, vga-xengt is only supported on Intel GPUs\n");
+        qemu_log("Error, vga-xengt is only supported on Intel GPUs\n");
         return;
     }
 
@@ -451,20 +451,20 @@ void xengt_vga_init(PCIBus *pci_bus, ram_addr_t vga_ram_addr, int vga_ram_size)
                            PCI_ADDRESS_SPACE_MEM_PREFETCH, vgt_vga_map);
 
     /* Note I have not set the class code of the bridge! */
-    printf("Create xengt ISA bridge successfully\n");
+    qemu_log("Create xengt ISA bridge successfully\n");
     ret = pci_vga_init(pci_bus, PCI_DEVFN(0x2,0),
 			 phys_ram_base + vga_ram_addr,
                          vga_ram_addr, vga_ram_size, 0, 0);
 
     vgt_legacy_vga_ram_size = vga_ram_size;
     if (ret) {
-        fprintf(stderr, "Warning: vga-xengt not available\n");
+        qemu_log("Warning: vga-xengt not available\n");
         return;
     }
 
     create_vgt_instance();
     qemu_register_exit(vgt_cleanupfn2, NULL);
-    printf("Create xengt VGA successfully\n");
+    qemu_log("Create xengt VGA successfully\n");
     return;
 }
 /*
