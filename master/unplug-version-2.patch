Device model unplug version 2:

Version 2 of the interface allows unplugging of individual IDE disks and/or
PCI NICs. IO ports 11 and 13 are used to control unplugging. A byte write to port
11 sets the unplug type (1 == IDE, 2 == NIC) and then a subsequent byte write to
port 13 tells qemu which device of the current type to unplug.

Signed-off-by: Paul Durrant <paul.durrant@citrix.com>

diff -r a378e486bbfa hw/ide.c
--- a/hw/ide.c	Tue Jan 15 15:51:15 2013 +0000
+++ b/hw/ide.c	Tue Jan 15 15:51:21 2013 +0000
@@ -3096,44 +3096,57 @@ static void ide_reset(IDEState *s)
 
 /* Unplug all of the IDE hard disks, starting at index @start in the
    table. */
-static void _ide_unplug_harddisks(int start)
+void ide_unplug_harddisk(int i)
 {
     IDEState *s;
-    int i, j;
+    int j;
 
     if (!principal_ide_controller) {
         fprintf(stderr, "No principal controller?\n");
         return;
     }
+
     /* wait for outstanding aio requests */
     qemu_aio_flush();
-    for (i = start; i < 4; i++) {
-        s = principal_ide_controller->ide_if + i;
-        if (!s->bs)
-            continue; /* drive not present */
-        if (s->is_cdrom)
-            continue; /* cdrom */
-        /* Is a hard disk, unplug it. */
-        for (j = 0; j < nb_drives; j++)
-            if (drives_table[j].bdrv == s->bs)
-                drives_table[j].bdrv = NULL;
-        bdrv_close(s->bs);
-        s->bs = NULL;
-        ide_reset(s);
+
+    s = principal_ide_controller->ide_if + i;
+    if (!s->bs)
+        return; /* drive not present */
+ 
+    if (s->is_cdrom)
+        return; /* cdrom */
+ 
+    /* Is a hard disk, unplug it. */
+    for (j = 0; j < nb_drives; j++) {
+        if (drives_table[j].bdrv == s->bs) {
+            fprintf(stderr, "%s: drive %d\n", __func__, i, j);
+            drives_table[j].bdrv = NULL;
+        }
     }
+ 
+    bdrv_flush(s->bs);
+    bdrv_close(s->bs);
+    s->bs = NULL;
+    ide_reset(s);
 }
 
 /* Unplug all hard disks except for the primary master (which will
    almost always be the boot device). */
 void ide_unplug_aux_harddisks(void)
 {
-    _ide_unplug_harddisks(1);
+    int i;
+
+    for (i = 1; i < 4; i++)
+        ide_unplug_harddisk(i);
 }
 
 /* Unplug all hard disks, including the boot device. */
-void ide_unplug_harddisks(void)
+void ide_unplug_all_harddisks(void)
 {
-    _ide_unplug_harddisks(0);
+    int i;
+
+    for (i = 0; i < 4; i++)
+        ide_unplug_harddisk(i);
 }
 
 static void ide_init2(IDEState *ide_state,
diff -r a378e486bbfa hw/pc.h
--- a/hw/pc.h	Tue Jan 15 15:51:15 2013 +0000
+++ b/hw/pc.h	Tue Jan 15 15:51:21 2013 +0000
@@ -162,7 +162,8 @@ void pci_piix3_ide_init(PCIBus *bus, Blo
                         qemu_irq *pic);
 void pci_piix4_ide_init(PCIBus *bus, BlockDriverState **hd_table, int devfn,
                         qemu_irq *pic);
-void ide_unplug_harddisks(void);
+void ide_unplug_harddisk(int i);
+void ide_unplug_all_harddisks(void);
 void ide_unplug_aux_harddisks(void);
 
 /* ne2000.c */
diff -r a378e486bbfa hw/pci.c
--- a/hw/pci.c	Tue Jan 15 15:51:15 2013 +0000
+++ b/hw/pci.c	Tue Jan 15 15:51:21 2013 +0000
@@ -263,6 +263,10 @@ PCIDevice *pci_register_device(PCIBus *b
     pci_dev->bus = bus;
     pci_dev->devfn = devfn;
     pstrcpy(pci_dev->name, sizeof(pci_dev->name), name);
+
+    fprintf(stderr, "%s: %02x:%02x:%02x (%s)\n", __func__, bus->bus_num,
+            devfn >> 3, devfn & 7, name);
+
     memset(pci_dev->irq_state, 0, sizeof(pci_dev->irq_state));
     pci_set_default_subsystem_id(pci_dev);
 
@@ -838,50 +842,70 @@ PCIDevice *pci_nic_init(PCIBus *bus, NIC
     return NULL;
 }
 
-void pci_unplug_netifs(void)
+void pci_dev_unplug(PCIDevice *dev)
+{
+    PCIBus *bus = dev->bus;
+
+    fprintf(stderr, "%s: %02x:%02x:%02x\n", __func__, bus->bus_num,
+            dev->devfn >> 3, dev->devfn & 7);
+
+    if (test_pci_devfn(dev->devfn) == 1) {
+        fprintf(stderr, "skipping hotplug device\n");
+        return;
+    }
+
+    bus->devices[dev->devfn] = NULL;
+    pci_unregister_io_regions(dev);
+}
+
+void pci_unplug_all_netifs(void)
 {
     PCIBus *bus;
-    PCIDevice *dev;
-    PCIIORegion *region;
-    int x;
-    int i;
+    int devfn;
 
     /* We only support one PCI bus */
     for (bus = first_bus; bus; bus = NULL) {
-       for (x = 0; x < 256; x++) {
-           dev = bus->devices[x];
-           if (dev &&
-               dev->config[0xa] == 0 &&
-               dev->config[0xb] == 2
-#ifdef CONFIG_PASSTHROUGH
-               && test_pci_devfn(x) != 1
-#endif
-               ) {
-               /* Found a netif.  Remove it from the bus.  Note that
-                  we don't free it here, since there could still be
-                  references to it floating around.  There are only
-                  ever one or two structures leaked, and it's not
-                  worth finding them all. */
-               bus->devices[x] = NULL;
-               for (i = 0; i < PCI_NUM_REGIONS; i++) {
-                   region = &dev->io_regions[i];
-                   if (region->addr == (uint32_t)-1 ||
-                       region->size == 0)
-                       continue;
-                   fprintf(logfile, "region type %d at [%x,%x).\n",
-                           region->type, region->addr,
-                           region->addr+region->size);
-                   if (region->type == PCI_ADDRESS_SPACE_IO) {
-                       isa_unassign_ioport(region->addr, region->size);
-                   } else if (region->type == PCI_ADDRESS_SPACE_MEM) {
-                       unregister_iomem(region->addr);
-                   }
-               }
-           }
-       }
+        for(devfn = 0; devfn < 256; devfn++) {
+            PCIDevice *dev = bus->devices[devfn];
+
+            if (dev &&
+                dev->config[0xa] == 0 &&
+                dev->config[0xb] == 2) {
+                pci_dev_unplug(dev);
+            }
+        }
     }
 }
 
+int pci_unplug_nic(int i)
+{
+    NICInfo *nd;
+    PCIDevice *pci_dev;
+
+    if (i >= nb_nics)
+        return -1;
+
+    nd = &nd_table[i];
+
+    if (!nd->used)
+        return -1;
+
+    fprintf(stderr, "%s: %02x:%02x:%02x:%02x:%02x:%02x\n", __func__,
+            nd->macaddr[0], nd->macaddr[1], nd->macaddr[2],
+            nd->macaddr[3], nd->macaddr[4], nd->macaddr[5]);
+
+    pci_dev = nd->private;
+    if (!pci_dev) {
+        fprintf(stderr, "%s: not PCI\n", __func__);
+        return -1;
+    }
+
+    pci_dev_unplug(pci_dev);
+
+    nd->used = 0;
+    return nd->vlan->id;
+}
+
 typedef struct {
     PCIDevice dev;
     PCIBus *bus;
diff -r a378e486bbfa hw/pci.h
--- a/hw/pci.h	Tue Jan 15 15:51:15 2013 +0000
+++ b/hw/pci.h	Tue Jan 15 15:51:21 2013 +0000
@@ -283,6 +283,7 @@ PCIBus *pci_register_bus(pci_set_irq_fn 
 
 PCIDevice *pci_nic_init(PCIBus *bus, NICInfo *nd, int devfn,
                   const char *default_model);
+void pci_dev_unplug(PCIDevice *dev);
 void pci_data_write(void *opaque, uint32_t addr, uint32_t val, int len);
 uint32_t pci_data_read(void *opaque, uint32_t addr, int len);
 int pci_bus_num(PCIBus *s);
diff -r a378e486bbfa hw/xen_platform.c
--- a/hw/xen_platform.c	Tue Jan 15 15:51:15 2013 +0000
+++ b/hw/xen_platform.c	Tue Jan 15 15:51:21 2013 +0000
@@ -3,6 +3,7 @@
  * 
  * Copyright (c) 2003-2004 Intel Corp.
  * Copyright (c) 2006 XenSource
+ * Copyright (c) 2010 Citrix Systems Inc.
  * 
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -34,21 +35,35 @@
 #include <assert.h>
 #include <xenguest.h>
 
-static int drivers_blacklisted;
-static uint16_t driver_product_version;
-static int throttling_disabled;
 extern FILE *logfile;
-static char log_buffer[4096];
-static int log_buffer_off;
 
 static uint8_t platform_flags;
+static int throttling_disabled;
 
 #define PFFLAG_ROM_LOCK 1 /* Sets whether ROM memory area is RW or RO */
 
-typedef struct PCIXenPlatformState
+static uint8_t
+get_platform_flags(void)
 {
-  PCIDevice  pci_dev;
-} PCIXenPlatformState;
+    return platform_flags;
+}
+
+static void
+set_platform_flags(uint8_t flags)
+{
+    hvmmem_type_t mem_type;
+
+    mem_type = (flags & PFFLAG_ROM_LOCK) ? HVMMEM_ram_ro : HVMMEM_ram_rw;
+
+    if (xc_hvm_set_mem_type(xc_handle, domid, mem_type, 0xc0, 0x40))
+        fprintf(logfile, "unable to change state of ROM memory area!\n");
+    else {
+        platform_flags = flags & PFFLAG_ROM_LOCK;
+
+        fprintf(logfile, "ROM memory area now %s\n",
+                (mem_type == HVMMEM_ram_ro) ? "RO" : "RW");
+    }
+}
 
 static void log_throttling(const char *path, void *opaque)
 {
@@ -69,7 +84,8 @@ static void log_throttling(const char *p
 #define BUCKET_MAX_SIZE (128*1024)
 #define BUCKET_FILL_RATE 256
 
-static void throttle(unsigned count)
+static void
+throttle(unsigned count)
 {
     static unsigned available;
     static struct timespec last_refil;
@@ -143,132 +159,260 @@ static void throttle(unsigned count)
     available -= count;
 }
 
-#define UNPLUG_ALL_IDE_DISKS 1
-#define UNPLUG_ALL_NICS 2
-#define UNPLUG_AUX_IDE_DISKS 4
+static char log_buffer[4096];
+static int log_buffer_off;
 
-static void platform_fixed_ioport_write2(void *opaque, uint32_t addr, uint32_t val)
+static void
+write_log(char c)
 {
-    switch (addr - 0x10) {
-    case 0:
-        /* Unplug devices.  Value is a bitmask of which devices to
-           unplug, with bit 0 the IDE devices, bit 1 the network
-           devices, and bit 2 the non-primary-master IDE devices. */
-        if (val & UNPLUG_ALL_IDE_DISKS)
-            ide_unplug_harddisks();
-        if (val & UNPLUG_ALL_NICS) {
-            pci_unplug_netifs();
-            net_tap_shutdown_all();
-        }
-        if (val & UNPLUG_AUX_IDE_DISKS) {
-            ide_unplug_aux_harddisks();
-        }
+    if (c == '\n' || log_buffer_off == sizeof(log_buffer) - 1) {
+        log_buffer[log_buffer_off] = 0;
+        throttle(log_buffer_off);
+        fprintf(logfile, "%s\n", log_buffer);
+        log_buffer_off = 0;
+        return;
+    }
+
+    if (isspace(c))
+        c = ' ';
+
+    if (c == ' ' || isgraph(c))
+        log_buffer[log_buffer_off++] = c;
+}
+
+static uint8_t unplug_version;
+static int unplug_version_isset;
+
+static int drivers_blacklisted;
+
+static uint8_t
+get_unplug_version(void)
+{
+    return unplug_version;
+}
+
+static int
+set_unplug_version(uint8_t version)
+{
+    if (unplug_version_isset)
+        return 0;
+
+    unplug_version = version;
+    unplug_version_isset = 1;
+
+    if (version > 1)
+        drivers_blacklisted = 1;
+
+    fprintf(logfile, "UNPLUG: protocol version set to %d "
+            "(drivers %sblacklisted)\n", unplug_version,
+            (!drivers_blacklisted) ? "not " : "");
+
+    return 1;
+}
+
+#define UNPLUG_ALL_IDE_DISKS_BIT    0
+#define UNPLUG_ALL_NICS_BIT         1
+#define UNPLUG_AUX_IDE_DISKS_BIT    2
+
+static void
+version_0_1_unplug(uint16_t mask)
+{
+    if (drivers_blacklisted)
+        return;
+
+    if (mask & (1 << UNPLUG_ALL_IDE_DISKS_BIT)) {
+        ide_unplug_all_harddisks();
+    }
+
+    if (mask & (1 << UNPLUG_ALL_NICS_BIT)) {
+        pci_unplug_all_netifs();
+        net_tap_shutdown_all();
+    }
+
+    if (mask & (1 << UNPLUG_AUX_IDE_DISKS_BIT)) {
+        ide_unplug_aux_harddisks();
+    }
+}
+
+#define UNPLUG_TYPE_IDE 1
+#define UNPLUG_TYPE_NIC 2
+
+static void
+version_2_unplug(uint8_t type, uint8_t index)
+{
+    if (drivers_blacklisted)
+        return;
+
+    switch (type) {
+    case UNPLUG_TYPE_IDE:
+        ide_unplug_harddisk(index);
         break;
-    case 2:
-        switch (val) {
-        case 1:
-            fprintf(logfile, "Citrix Windows PV drivers loaded in guest\n");
-            break;
-        case 0:
-            fprintf(logfile, "Guest claimed to be running PV product 0?\n");
-            break;
-        default:
-            fprintf(logfile, "Unknown PV product %d loaded in guest\n", val);
-            break;
-        }
-        driver_product_version = val;
+    case UNPLUG_TYPE_NIC: {
+        int id;
+
+        if ((id = pci_unplug_nic(index)) >= 0)
+            net_tap_shutdown_vlan(id);
+
+        break;
+    }
+    default:
+        fprintf(logfile, "UNPLUG: unrecognized type %02x\n",
+                type);
         break;
     }
 }
 
-static void platform_fixed_ioport_write4(void *opaque, uint32_t addr,
-                                         uint32_t val)
+static uint16_t product_id;
+static uint32_t build_number;
+
+static void
+set_product_id(uint16_t id)
 {
-    switch (addr - 0x10) {
-    case 0:
-        /* PV driver version */
-        if (driver_product_version == 0) {
-            fprintf(logfile,
-                    "Drivers tried to set their version number (%d) before setting the product number?\n",
-                    val);
-            return;
+    product_id = id;
+}
+
+static void
+set_build_number(uint32_t number)
+{
+    if (product_id == 0) {
+        fprintf(logfile, "UNPLUG: product_id has not been set\n");
+    } else {    
+        build_number = number;
+
+        fprintf(logfile, "UNPLUG: product_id: %d build_number: %d\n",
+                product_id, build_number);
+
+        drivers_blacklisted =
+            xenstore_pv_driver_build_blacklisted(product_id,
+                                                 build_number);
+
+        fprintf(logfile, "UNPLUG: drivers %sblacklisted\n",
+                (!drivers_blacklisted) ? "not " : "");
+    }
+
+}
+
+static uint32_t
+platform_fixed_ioport_read4(void *opaque, uint32_t addr)
+{
+    return 0xFFFFFFFF;
+}
+
+static uint32_t
+platform_fixed_ioport_read2(void *opaque, uint32_t addr)
+{
+    uint16_t val;
+
+    switch (addr) {
+    case 0x10:
+        val = (!drivers_blacklisted) ? 0x49d2 : 0xd249;
+        break;
+
+    default:
+        val = 0xFFFF;
+        break;
+    }
+
+    return (uint32_t)val;
+}
+
+static uint32_t
+platform_fixed_ioport_read1(void *opaque, uint32_t addr)
+{
+    uint8_t val;
+
+    switch (addr) {
+    case 0x10:
+        val = get_platform_flags();
+        break;
+
+    case 0x12:
+        /*
+         * Reading this port implicitly sets the unplug protocol
+         * version to at least 1. If the vserion is already been
+         * explicitly set then this call has no effect.
+         */
+        (void) set_unplug_version(1);
+
+        val = get_unplug_version();
+
+        fprintf(logfile, "UNPLUG: protocol %d active\n", val);
+        break;
+
+    default:
+        val = 0xFF;
+    }
+
+    return (uint32_t)val;
+}
+
+static void
+platform_fixed_ioport_write4(void *opaque, uint32_t addr, uint32_t val)
+{
+    if (unplug_version != 0)
+        set_build_number(val);
+}
+
+static void
+platform_fixed_ioport_write2(void *opaque, uint32_t addr, uint32_t val)
+{
+    switch (addr) {
+    case 0x10:
+        if (unplug_version == 0 ||
+            unplug_version == 1) {
+            uint16_t mask = (uint16_t)val;
+
+            version_0_1_unplug(mask);
         }
-        fprintf(logfile, "PV driver build %d\n", val);
-        if (xenstore_pv_driver_build_blacklisted(driver_product_version,
-                                                 val)) {
-            fprintf(logfile, "Drivers are blacklisted!\n");
-            drivers_blacklisted = 1;
-        }
+        break;
+
+    case 0x12:
+        if (unplug_version != 0)
+            set_product_id((uint16_t)val);
+
         break;
     }
 }
 
-static void platform_fixed_ioport_write1(void *opaque, uint32_t addr, uint32_t val)
+static void
+platform_fixed_ioport_write1(void *opaque, uint32_t addr, uint32_t val)
 {
-    switch (addr - 0x10) {
-    case 0: /* Platform flags */ {
-        hvmmem_type_t mem_type = (val & PFFLAG_ROM_LOCK) ?
-            HVMMEM_ram_ro : HVMMEM_ram_rw;
-        if (xc_hvm_set_mem_type(xc_handle, domid, mem_type, 0xc0, 0x40))
-            fprintf(logfile,"platform_fixed_ioport: unable to change ro/rw "
-                    "state of ROM memory area!\n");
-        else {
-            platform_flags = val & PFFLAG_ROM_LOCK;
-            fprintf(logfile,"platform_fixed_ioport: changed ro/rw "
-                    "state of ROM memory area. now is %s state.\n",
-                    (mem_type == HVMMEM_ram_ro ? "ro":"rw"));
-        }
+    static uint8_t unplug_type;
+
+    switch (addr) {
+    case 0x10:
+        set_platform_flags((uint8_t)val);
         break;
-    }
-    case 2:
-        /* Send bytes to syslog */
-        if (val == '\n' || log_buffer_off == sizeof(log_buffer) - 1) {
-            /* Flush buffer */
-            log_buffer[log_buffer_off] = 0;
-            throttle(log_buffer_off);
-            fprintf(logfile, "%s\n", log_buffer);
-            log_buffer_off = 0;
-            break;
-        }
-        log_buffer[log_buffer_off++] = val;
+
+    case 0x11:
+        if (unplug_version == 2)
+            unplug_type = (uint8_t)val;
+
         break;
-    }
-}
 
-static uint32_t platform_fixed_ioport_read2(void *opaque, uint32_t addr)
-{
-    switch (addr - 0x10) {
-    case 0:
-        if (drivers_blacklisted) {
-            /* The drivers will recognise this magic number and refuse
-             * to do anything. */
-            return 0xd249;
-        } else {
-            /* Magic value so that you can identify the interface. */
-            return 0x49d2;
-        }
-    default:
-        return 0xffff;
-    }
-}
+    case 0x12:
+        write_log((char)val);
+        break;
 
-static uint32_t platform_fixed_ioport_read1(void *opaque, uint32_t addr)
-{
-    switch (addr - 0x10) {
-    case 0:
-        /* Platform flags */
-        return platform_flags;
-    case 2:
-        /* Version number */
-        return 1;
-    default:
-        return 0xff;
+    case 0x13:
+        /*
+         * The first write to this port sets the unpluc protocol version.
+         * Any subsequent write, providing the protocol is set to 2, will
+         * be treated as an unplug index.
+         */
+        if (!set_unplug_version((uint8_t)val) &&
+            unplug_version == 2)
+            version_2_unplug(unplug_type, (uint8_t)val);
+
+        break;
     }
 }
 
 static void platform_fixed_ioport_save(QEMUFile *f, void *opaque)
 {
-    qemu_put_8s(f, &platform_flags);
+    uint8_t flags = get_platform_flags();
+
+    qemu_put_8s(f, &flags);
 }
 
 static int platform_fixed_ioport_load(QEMUFile *f, void *opaque, int version_id)
@@ -279,7 +423,7 @@ static int platform_fixed_ioport_load(QE
         return -EINVAL;
 
     qemu_get_8s(f, &flags);
-    platform_fixed_ioport_write1(NULL, 0x10, flags);
+    set_platform_flags(flags);
 
     return 0;
 }
@@ -295,10 +439,11 @@ void platform_fixed_ioport_init(void)
     register_ioport_write(0x10, 16, 4, platform_fixed_ioport_write4, NULL);
     register_ioport_write(0x10, 16, 2, platform_fixed_ioport_write2, NULL);
     register_ioport_write(0x10, 16, 1, platform_fixed_ioport_write1, NULL);
+    register_ioport_read(0x10, 16, 4, platform_fixed_ioport_read4, NULL);
     register_ioport_read(0x10, 16, 2, platform_fixed_ioport_read2, NULL);
     register_ioport_read(0x10, 16, 1, platform_fixed_ioport_read1, NULL);
 
-    platform_fixed_ioport_write1(NULL, 0x10, 0);
+    set_platform_flags(0);
 }
 
 static uint32_t xen_platform_ioport_readb(void *opaque, uint32_t addr)
@@ -314,27 +459,22 @@ static void xen_platform_ioport_writeb(v
     val  &= 0xff;
 
     switch (addr) {
-    case 0: /* Platform flags */
-        platform_fixed_ioport_write1(NULL, 0x10, val);
+    case 0:
+        set_platform_flags((uint8_t)val);
         break;
     case 8:
-        {
-            if (val == '\n' || log_buffer_off == sizeof(log_buffer) - 1) {
-                /* Flush buffer */
-                log_buffer[log_buffer_off] = 0;
-                throttle(log_buffer_off);
-                fprintf(logfile, "%s\n", log_buffer);
-                log_buffer_off = 0;
-                break;
-            }
-            log_buffer[log_buffer_off++] = val;
-        }
+        write_log((char)val);
         break;
     default:
         break;
     }
 }
 
+typedef struct PCIXenPlatformState
+{
+  PCIDevice  pci_dev;
+} PCIXenPlatformState;
+
 static void platform_ioport_map(PCIDevice *pci_dev, int region_num, uint32_t addr, uint32_t size, int type)
 {
     PCIXenPlatformState *d = (PCIXenPlatformState *)pci_dev;
@@ -410,8 +550,9 @@ static int xen_pci_load(QEMUFile *f, voi
     if (version_id >= 2) {
         if (version_id == 2) {
             uint8_t flags;
+
             qemu_get_8s(f, &flags);
-            xen_platform_ioport_writeb(d, 0, flags);
+            set_platform_flags(flags);
         }
         qemu_get_be64(f);
     }
diff -r a378e486bbfa net.c
--- a/net.c	Tue Jan 15 15:51:15 2013 +0000
+++ b/net.c	Tue Jan 15 15:51:21 2013 +0000
@@ -1987,13 +1987,36 @@ void net_client_check(void)
     }
 }
 
+static void net_tap_shutdown(struct TAPState *tap)
+{
+    VLANClientState *vc = tap->vc;
+
+    fprintf(stderr, "%s: model=%s,name=%s\n", __func__, vc->model, vc->name);
+
+    qemu_set_fd_handler2(tap->fd, 0,0,0,0);
+    close(tap->fd);
+}
+
 void net_tap_shutdown_all(void)
 {
-    struct IOHandlerRecord **pioh, *ioh;
+    struct TAPState *tap;
 
-    while (head_net_tap) {
-        qemu_set_fd_handler2(head_net_tap->fd, 0,0,0,0);
-        close(head_net_tap->fd);
-        head_net_tap = head_net_tap->next;
+    for (tap = head_net_tap; tap; tap = tap->next)
+        net_tap_shutdown(tap);
+}
+
+void net_tap_shutdown_vlan(int id)
+{
+    struct TAPState *tap;
+
+    for (tap = head_net_tap; tap; tap = tap->next) {
+        VLANClientState *vc = tap->vc;
+        VLANState *vlan = vc->vlan;
+
+        if (vlan->id != id)
+            continue;
+        
+        net_tap_shutdown(tap);
     }
 }
+
diff -r a378e486bbfa net.h
--- a/net.h	Tue Jan 15 15:51:15 2013 +0000
+++ b/net.h	Tue Jan 15 15:51:21 2013 +0000
@@ -103,6 +103,7 @@ void net_cleanup(void);
 int slirp_is_inited(void);
 void net_client_check(void);
 void net_tap_shutdown_all(void);
+void net_tap_shutdown_vlan(int id);
 void net_host_device_add(const char *device, const char *opts);
 void net_host_device_remove(int vlan_id, const char *device);
 
diff -r a378e486bbfa qemu-xen.h
--- a/qemu-xen.h	Tue Jan 15 15:51:15 2013 +0000
+++ b/qemu-xen.h	Tue Jan 15 15:51:21 2013 +0000
@@ -46,7 +46,8 @@ void set_vram_mapping(void *opaque, unsi
 void unset_vram_mapping(void *opaque);
 #endif
 
-void pci_unplug_netifs(void);
+void pci_unplug_all_netifs(void);
+int pci_unplug_nic(int i);
 void destroy_hvm_domain(void);
 void unregister_iomem(target_phys_addr_t start);
 
