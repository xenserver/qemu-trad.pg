syslog_support.patch

Add syslog support for error reporting

Add support for --syslog to redirect all output to syslog instead of
stdout/stderr.

diff --git a/Makefile b/Makefile
index 439a7e0..626e090 100644
--- a/Makefile
+++ b/Makefile
@@ -263,6 +263,10 @@ endif
 test speed: all
 	$(MAKE) -C tests $@
 
+.PHONY: unittests
+unittests:
+	$(MAKE) -C unittests $@
+
 TAGS:
 	etags *.[ch] tests/*.[ch]
 
diff --git a/Makefile.target b/Makefile.target
index 8052bfe..85cea08 100644
--- a/Makefile.target
+++ b/Makefile.target
@@ -503,7 +503,7 @@ endif #CONFIG_BSD_USER
 # System emulator target
 ifndef CONFIG_USER_ONLY
 
-OBJS=vl.o osdep.o monitor.o pci.o loader.o isa_mmio.o machine.o dma-helpers.o
+OBJS=vl.o osdep.o monitor.o pci.o loader.o isa_mmio.o machine.o dma-helpers.o syslog.o
 # virtio has to be here due to weird dependency between PCI and virtio-net.
 # need to fix this properly
 OBJS+=virtio.o virtio-blk.o virtio-balloon.o virtio-net.o virtio-console.o
diff --git a/configure b/configure
index 4547359..4157f90 100755
--- a/configure
+++ b/configure
@@ -160,6 +160,7 @@ EXESUF=""
 gdbstub="no"
 slirp="yes"
 vde="yes"
+syslog="yes"
 fmod_lib=""
 fmod_inc=""
 oss_lib=""
@@ -394,6 +395,8 @@ for opt do
   ;;
   --disable-vde) vde="no"
   ;;
+  --disable-syslog) syslog="no"
+  ;;
   --disable-kqemu) kqemu="no"
   ;;
   --disable-brlapi) brlapi="no"
@@ -566,6 +569,7 @@ echo "  --oss-lib                path to OSS library"
 echo "  --enable-uname-release=R Return R for uname -r in usermode emulation"
 echo "  --sparc_cpu=V            Build qemu for Sparc architecture v7, v8, v8plus, v8plusa, v9"
 echo "  --disable-vde            disable support for vde network"
+echo "  --disable-syslog         disable support to output to syslog"
 echo "  --disable-aio            disable AIO support"
 echo "  --disable-blobs          disable installing provided firmware blobs"
 echo "  --kerneldir=PATH         look for kernel includes in PATH"
@@ -1179,6 +1183,7 @@ echo "Documentation     $build_docs"
 echo "uname -r          $uname_release"
 echo "NPTL support      $nptl"
 echo "vde support       $vde"
+echo "syslog support    $syslog"
 echo "AIO support       $aio"
 echo "Install blobs     $blobs"
 echo "KVM support       $kvm"
@@ -1383,6 +1388,9 @@ if test "$vde" = "yes" ; then
   echo "#define CONFIG_VDE 1" >> $config_h
   echo "VDE_LIBS=-lvdeplug" >> $config_mak
 fi
+if test "$syslog" = "yes" ; then
+  echo "#define CONFIG_SYSLOG 1" >> $config_h
+fi
 if ! test -z "$audio_card_list"; then
 	echo "CONFIG_AUDIO=yes" >> $config_mak
 fi
diff --git a/hw/xen_backend.h b/hw/xen_backend.h
index 5c1adde..49d9c94 100644
--- a/hw/xen_backend.h
+++ b/hw/xen_backend.h
@@ -83,7 +83,7 @@ int xen_be_bind_evtchn(struct XenDevice *xendev);
 void xen_be_unbind_evtchn(struct XenDevice *xendev);
 int xen_be_send_notify(struct XenDevice *xendev);
 void xen_be_printf(struct XenDevice *xendev, int msg_level, const char *fmt, ...)
-    __attribute__ ((format(printf, 3, 4)));
+    __attribute__ ((format(__printf__, 3, 4)));
 
 /* actual backend drivers */
 extern struct XenDevOps xen_console_ops;      /* xen_console.c     */
diff --git a/mk/xen-device-model.spec.in b/mk/xen-device-model.spec.in
index b4edb2f..5504b90 100644
--- a/mk/xen-device-model.spec.in
+++ b/mk/xen-device-model.spec.in
@@ -7,8 +7,9 @@ Group: System/Hypervisor
 Source0: xen-device-model-%{version}.tar.bz2
 Patch0: xen-device-model-development.patch
 BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-buildroot
-BuildRequires: zlib-devel, xen-libs-devel, xen-dom0-libs-devel, pciutils-devel, libpciaccess-devel
+BuildRequires: zlib-devel, xen-libs-devel, xen-dom0-libs-devel, pciutils-devel, libpciaccess-devel, check-devel
 Requires(pre): shadow-utils
+Provides: qemu-xen(syslog) = 1
 
 %description
 This package contains qemu-dm, the Xen device model.
@@ -19,6 +20,7 @@ This package contains qemu-dm, the Xen device model.
 %build
 ./xen-setup --disable-opengl --disable-vnc-tls --disable-blobs --disable-sdl --enable-werror
 %{?cov_wrap} %{__make}
+%{__make} unittests
 
 %install
 rm -rf $RPM_BUILD_ROOT
diff --git a/qemu-common.h b/qemu-common.h
index 50dfb6b..52e7fa7 100644
--- a/qemu-common.h
+++ b/qemu-common.h
@@ -209,4 +209,21 @@ void qemu_iovec_from_buffer(QEMUIOVector *qiov, const void *buf, size_t count);
 
 #endif /* dyngen-exec.h hack */
 
+/*
+ * Redirect calls to output to internal functions to be able
+ * to redirect output to syslog directly
+ */
+#ifdef CONFIG_SYSLOG
+extern char use_syslog;
+
+int log_printf(const char *fmt, ...)  __attribute__ ((__format__ (__printf__, 1, 2)));
+#define printf log_printf
+int log_fprintf(FILE*, const char *fmt, ...)  __attribute__ ((__format__ (__printf__, 2, 3)));
+#define fprintf log_fprintf
+int log_vfprintf(FILE*, const char *fmt, va_list ap)  __attribute__ ((__format__ (__printf__, 2, 0)));
+#define vfprintf log_vfprintf
+void log_perror(const char *s);
+#define perror log_perror
+#endif
+
 #endif
diff --git a/readline.c b/readline.c
index 4b68726..e08b459 100644
--- a/readline.c
+++ b/readline.c
@@ -32,6 +32,7 @@
 #define IS_ESC  1
 #define IS_CSI  2
 
+#undef printf
 #define printf do_not_use_printf
 
 static char term_cmd_buf[TERM_CMD_BUF_SIZE + 1];
diff --git a/syslog.c b/syslog.c
new file mode 100644
index 0000000..ed085af
--- /dev/null
+++ b/syslog.c
@@ -0,0 +1,102 @@
+/*
+ * Syslog redirection functions
+ * 
+ * Copyright (c) 2014 Citrix Systems Inc.
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
+
+#include <stdlib.h>
+#include <unistd.h>
+#include <errno.h>
+
+#include "qemu-common.h"
+
+#ifdef CONFIG_SYSLOG
+#include <syslog.h>
+
+#ifndef perror
+#error perror should be defined
+#endif
+
+char use_syslog = 0;
+
+#undef fprintf
+#undef printf
+#undef vfprintf
+#undef perror
+
+int log_vfprintf(FILE *f, const char *fmt, va_list ap)
+{
+    if (use_syslog && (f == stdout || f == stderr)) {
+        vsyslog(LOG_DAEMON|LOG_INFO, fmt, ap);
+        /* just return a value to make every caller happy */
+        return 10;
+    }
+
+    return vfprintf(f, fmt, ap);
+}
+
+void log_perror(const char *s)
+{
+    if (!use_syslog) {
+        perror(s);
+        return;
+    }
+
+    char errbuf[256];
+    int err = errno;
+
+    errno = 0;
+    strerror_r(err, errbuf, sizeof(errbuf));
+    if (errno != 0)
+       return;
+
+    if (s && *s)
+        syslog(LOG_DAEMON|LOG_INFO, "%s: %s", s, errbuf);
+    else
+        syslog(LOG_DAEMON|LOG_INFO, "%s", errbuf);
+}
+
+int log_printf(const char *fmt, ...)
+{
+    va_list ap;
+    int res;
+
+    va_start(ap, fmt);
+    res = log_vfprintf(stdout, fmt, ap);
+    va_end(ap);
+
+    return res;
+}
+
+int log_fprintf(FILE* f, const char *fmt, ...)
+{
+    va_list ap;
+    int res;
+
+    va_start(ap, fmt);
+    res = log_vfprintf(f, fmt, ap);
+    va_end(ap);
+
+    return res;
+}
+
+#endif
+
diff --git a/unittests/Makefile b/unittests/Makefile
new file mode 100644
index 0000000..c91e17c
--- /dev/null
+++ b/unittests/Makefile
@@ -0,0 +1,19 @@
+QEMU_ROOT ?= ..
+-include ../config-host.mak
+VPATH=$(SRC_PATH)/tests
+
+CFLAGS=-Wall -O2 -g -fno-strict-aliasing
+LDFLAGS=
+
+TESTS=xen-tests
+
+all: $(TESTS)
+
+xen-tests: xen-tests.c ../syslog.c
+	$(CC) $(CFLAGS) -I.. $(LDFLAGS) -Wl,--wrap,syslog -Wl,--wrap,vsyslog -o $@ $^ -lcheck
+
+unittests: $(TESTS)
+	./xen-tests
+
+clean:
+	rm -f *~ *.o $(TESTS)
diff --git a/unittests/xen-tests.c b/unittests/xen-tests.c
new file mode 100644
index 0000000..fc8104d
--- /dev/null
+++ b/unittests/xen-tests.c
@@ -0,0 +1,128 @@
+#include <check.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdarg.h>
+#include <errno.h>
+#include <syslog.h>
+
+#include <qemu-common.h>
+
+static int  syslog_called = 0;
+static char syslog_buf[512];
+
+void __wrap_vsyslog(int priority, const char *format, va_list ap)
+{
+    memset(syslog_buf, 0, sizeof(syslog_buf));
+    vsnprintf(syslog_buf, sizeof(syslog_buf), format, ap);
+    ++syslog_called;
+}
+
+void __wrap_syslog(int priority, const char *format, ...)
+{
+    va_list ap;
+
+    va_start(ap, format);
+    __wrap_vsyslog(LOG_INFO, format, ap);
+    va_end(ap);
+}
+
+static void syslog_check(const char *expected)
+{
+    fail_if(syslog_called != use_syslog);
+    if (use_syslog)
+        fail_if(strstr(syslog_buf, expected) == NULL, "output: %s", syslog_buf);
+
+    /* reset back to original state */
+    syslog_called = 0;
+    memset(syslog_buf, 0, sizeof(syslog_buf));
+}
+
+static void call_vfprintf(FILE *f, const char *format, ...)
+{
+    va_list ap;
+
+    va_start(ap, format);
+    vfprintf(f, format, ap);
+    va_end(ap);
+}
+
+START_TEST (syslog_redirect)
+{
+    FILE *out = fopen("out.txt", "w+");
+    fail_if(out == NULL);
+
+    for (use_syslog = 0; use_syslog < 2; ++use_syslog) {
+
+        /* for all these functions output should be
+         * redirected to syslog
+         */
+        printf("check\n");
+        syslog_check("check");
+
+        errno = EINVAL;
+        perror("errno");
+        syslog_check(strerror(EINVAL));
+
+        fprintf(stderr, "check %d\n", 7654);
+        syslog_check("7654");
+
+        fprintf(stdout, "check %d\n", 12345);
+        syslog_check("12345");
+
+        call_vfprintf(stdout, "%d\n", -456);
+        syslog_check("-456");
+
+        call_vfprintf(stderr, "%d\n", -62243);
+        syslog_check("-62243");
+
+        /* These functions should just write to the file
+         * No output to syslog
+         */
+        fprintf(out, "line one\n");
+        fail_if(syslog_called != 0);
+
+        call_vfprintf(out, "line %d\n", 876);
+        fail_if(syslog_called != 0);
+    }
+
+    /* check content of the file */
+    fail_if(fseek(out, 0L, SEEK_SET) != 0);
+    for (use_syslog = 0; use_syslog < 2; ++use_syslog) {
+        fail_if(fgets(syslog_buf, sizeof(syslog_buf), out) == NULL);
+        fail_if(strcmp(syslog_buf, "line one\n") != 0);
+
+        fail_if(fgets(syslog_buf, sizeof(syslog_buf), out) == NULL);
+        fail_if(strcmp(syslog_buf, "line 876\n") != 0);
+    }
+    fail_if(fgets(syslog_buf, sizeof(syslog_buf), out) != NULL);
+
+    /* cleanup */
+    fclose(out);
+    unlink("out.txt");
+}
+END_TEST
+ 
+static Suite *
+xen_suite (void)
+{
+    Suite *s = suite_create ("Xen");
+
+    /* Core test case */
+    TCase *tc_syslog = tcase_create ("Syslog");
+    tcase_add_test (tc_syslog, syslog_redirect);
+    suite_add_tcase (s, tc_syslog);
+
+    return s;
+}
+
+int main(void)
+{
+    int number_failed;
+    Suite *s = xen_suite ();
+    SRunner *sr = srunner_create (s);
+    srunner_run_all (sr, CK_NORMAL);
+    number_failed = srunner_ntests_failed (sr);
+    srunner_free (sr);
+    return (number_failed == 0) ? EXIT_SUCCESS : EXIT_FAILURE;
+}
+
diff --git a/vl.c b/vl.c
index d838667..b6ec68a 100644
--- a/vl.c
+++ b/vl.c
@@ -122,6 +122,10 @@
 #endif
 #endif
 
+#ifdef CONFIG_SYSLOG
+#include <syslog.h>
+#endif
+
 #include "qemu_socket.h"
 
 #if defined(CONFIG_SLIRP)
@@ -4361,6 +4365,9 @@ enum {
     QEMU_OPTION_incoming,
     QEMU_OPTION_chroot,
     QEMU_OPTION_runas,
+#ifdef CONFIG_SYSLOG
+    QEMU_OPTION_syslog,
+#endif
 };
 
 typedef struct QEMUOption {
@@ -4369,6 +4376,10 @@ typedef struct QEMUOption {
     int index;
 } QEMUOption;
 
+#ifdef CONFIG_SYSLOG
+static const char syslog_option[] = "syslog";
+#endif
+
 static const QEMUOption qemu_options[] = {
     /* Please keep in synch with help, QEMU_OPTION_ enums, and
        qemu-doc.texi */
@@ -4514,6 +4525,9 @@ static const QEMUOption qemu_options[] = {
     { "incoming", HAS_ARG, QEMU_OPTION_incoming },
     { "chroot", HAS_ARG, QEMU_OPTION_chroot },
     { "runas", HAS_ARG, QEMU_OPTION_runas },
+#ifdef CONFIG_SYSLOG
+    { syslog_option, 0, QEMU_OPTION_syslog },
+#endif
     { NULL },
 };
 
@@ -4878,9 +4892,36 @@ int main(int argc, char **argv, char **envp)
     const char *chroot_dir = NULL;
     const char *run_as = NULL;
 
-    qemu_cache_utils_init(envp);
     logfile = stderr; /* initial value */
 
+#ifdef CONFIG_SYSLOG
+    /* --syslog option must be read ASAP */
+    for (optind = 1; optind < argc; ++optind) {
+        r = argv[optind];
+        if (r[0] != '-')
+            continue;
+
+        /* Treat --foo the same as -foo.  */
+        if (r[1] == '-')
+            r++;
+        if (strcmp(syslog_option, r + 1) != 0)
+            continue;
+
+        use_syslog = 1;
+
+        openlog(argv[0], LOG_PID, LOG_DAEMON);
+
+        fd = open("/dev/null", O_RDWR);
+        if (fd < 0) return 1;
+        dup2(fd, 1);
+        dup2(fd, 2);
+        close(fd);
+        fd = 0;
+    }
+#endif
+
+    qemu_cache_utils_init(envp);
+
 #if !defined(__sun__) && !defined(CONFIG_STUBDOM)
     struct rlimit rl;
     /* Maximise rlimits. Needed where default constraints are tight (*BSD). */
