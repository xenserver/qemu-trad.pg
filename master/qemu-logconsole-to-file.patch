diff -r 58ec7bb071a5 qemu-char.c
--- a/qemu-char.c	Tue Jan 15 15:55:13 2013 +0000
+++ b/qemu-char.c	Tue Jan 15 15:56:57 2013 +0000
@@ -588,7 +588,7 @@ static CharDriverState *qemu_chr_open_fi
 {
     int fd_out;
 
-    TFR(fd_out = open(file_out, O_WRONLY | O_TRUNC | O_CREAT | O_BINARY | O_APPEND, 0666));
+    TFR(fd_out = open(file_out, O_WRONLY | O_APPEND | O_CREAT | O_BINARY, 0666));
     if (fd_out < 0)
         return NULL;
     return qemu_chr_open_fd(-1, fd_out);
diff -r 58ec7bb071a5 sysemu.h
--- a/sysemu.h	Tue Jan 15 15:55:13 2013 +0000
+++ b/sysemu.h	Tue Jan 15 15:56:57 2013 +0000
@@ -196,6 +196,7 @@ void pci_device_hot_remove_success(int p
 #define MAX_SERIAL_PORTS 4
 
 extern CharDriverState *serial_hds[MAX_SERIAL_PORTS];
+extern char *serial_devices[MAX_SERIAL_PORTS];
 
 /* parallel ports */
 
diff -r 58ec7bb071a5 vl.c
--- a/vl.c	Tue Jan 15 15:55:13 2013 +0000
+++ b/vl.c	Tue Jan 15 15:56:57 2013 +0000
@@ -233,6 +233,7 @@ static int no_frame = 0;
 #endif
 int no_quit = 0;
 CharDriverState *serial_hds[MAX_SERIAL_PORTS];
+char *serial_devices[MAX_SERIAL_PORTS];
 CharDriverState *parallel_hds[MAX_PARALLEL_PORTS];
 CharDriverState *virtcon_hds[MAX_VIRTIO_CONSOLES];
 #ifdef TARGET_I386
@@ -4812,7 +4813,6 @@ int main(int argc, char **argv, char **e
     const char *r, *optarg;
     CharDriverState *monitor_hd = NULL;
     const char *monitor_device;
-    const char *serial_devices[MAX_SERIAL_PORTS];
     int serial_device_index;
     const char *parallel_devices[MAX_PARALLEL_PORTS];
     int parallel_device_index;
@@ -5962,7 +5962,7 @@ int main(int argc, char **argv, char **e
             if (!virtcon_hds[i]) {
                 fprintf(stderr, "qemu: could not open virtio console '%s'\n",
                         devname);
-                exit(1);
+                continue;
             }
         }
     }
diff -r 58ec7bb071a5 xenstore.c
--- a/xenstore.c	Tue Jan 15 15:55:13 2013 +0000
+++ b/xenstore.c	Tue Jan 15 15:56:57 2013 +0000
@@ -488,6 +488,8 @@ void xenstore_parse_domain_config(int hv
     char *buf = NULL;
     char *fpath = NULL, *bpath = NULL,
         *dev = NULL, *params = NULL, *drv = NULL;
+    char *serial_c;
+    char serial_temp[PATH_MAX - 5];
     int i, ret;
     unsigned int len, num, hd_index, pci_devid = 0;
     BlockDriverState *bs;
@@ -506,6 +508,23 @@ void xenstore_parse_domain_config(int hv
     for(i = 0; i < MAX_DRIVES + 1; i++)
         media_filename[i] = NULL;
 
+    /* read the console output filename */
+    serial_c = xs_read(xsh, XBT_NULL, "/local/logconsole/@", NULL);
+    if (serial_c) {
+        serial_devices[0] = qemu_mallocz(PATH_MAX);
+	strcpy(serial_devices[0], "file:");
+	if (strstr(serial_c, "%s")) {
+            char *name = xenstore_vm_read(domid, "uuid", NULL);
+            /* format string exploit from xenstore?? */
+	    snprintf(serial_temp, sizeof(serial_temp), serial_c, name);
+            free(name);
+	}else
+	    snprintf(serial_temp, sizeof(serial_temp), serial_c, domid);
+	strncat(serial_devices[0], serial_temp, sizeof(serial_temp));
+	free(serial_c);
+    }
+    /* we don't care if it failed or not */
+
     danger_path = xs_get_domain_path(xsh, hvm_domid);
     if (danger_path == NULL) {
         fprintf(logfile, "xs_get_domain_path() error\n");
