# HG changeset patch
# Parent dd1474d4e909c8d71ad889aad0006c72548e712c

diff --git a/i386-dm/helper2.c b/i386-dm/helper2.c
index 718f9d4..4034e9b 100644
--- a/i386-dm/helper2.c
+++ b/i386-dm/helper2.c
@@ -114,8 +114,13 @@ int send_vcpu = 0;
 
 //the evtchn port for polling the notification,
 evtchn_port_t *ioreq_local_port;
+#define EVTCHN_PORT_INVALID ((evtchn_port_t)-1)
 /* evtchn local port for buffered io */
-evtchn_port_t bufioreq_local_port;
+static evtchn_port_t bufioreq_local_port = EVTCHN_PORT_INVALID;
+
+#ifndef HVM_PARAM_BUFIOREQ_EVTCHN
+#define HVM_PARAM_BUFIOREQ_EVTCHN 26
+#endif
 
 CPUX86State *cpu_x86_init(const char *cpu_model)
 {
@@ -162,17 +167,17 @@ CPUX86State *cpu_x86_init(const char *cpu_model)
         }
         rc = xc_get_hvm_param(xc_handle, domid, HVM_PARAM_BUFIOREQ_EVTCHN,
                 &bufioreq_evtchn);
-        if (rc < 0) {
-            fprintf(logfile, "failed to get HVM_PARAM_BUFIOREQ_EVTCHN error=%d\n",
-                    errno);
-            return NULL;
-        }
-        rc = xenevtchn_bind_interdomain(xce_handle, domid, (uint32_t)bufioreq_evtchn);
-        if (rc == -1) {
-            fprintf(logfile, "bind interdomain ioctl error %d\n", errno);
-            return NULL;
+        /* here we assume if Xen version does not support this event
+         * channel and use polling
+         */
+        if (rc >= 0) {
+            rc = xenevtchn_bind_interdomain(xce_handle, domid, (uint32_t)bufioreq_evtchn);
+            if (rc == -1) {
+                fprintf(logfile, "bind interdomain ioctl error %d\n", errno);
+                return NULL;
+            }
+            bufioreq_local_port = rc;
         }
-        bufioreq_local_port = rc;
     }
 
     return env;
@@ -282,7 +287,8 @@ static ioreq_t *cpu_get_ioreq(void)
     evtchn_port_t port;
 
     port = xenevtchn_pending(xce_handle);
-    if (port == bufioreq_local_port) {
+    if (bufioreq_local_port != EVTCHN_PORT_INVALID &&
+        port == bufioreq_local_port) {
         qemu_mod_timer(buffered_io_timer,
                 BUFFER_IO_MAX_DELAY + qemu_get_clock(rt_clock));
         return NULL;
@@ -496,7 +502,7 @@ static int __handle_buffered_iopage(CPUState *env)
     if (!buffered_io_page)
         return 0;
 
-    memset(&req, 0x00, sizeof(req));
+    req.count = 0;
 
     for (;;) {
         uint32_t rdptr = buffered_io_page->read_pointer, wrptr;
@@ -539,7 +545,8 @@ static void handle_buffered_io(void *opaque)
 {
     CPUState *env = opaque;
 
-    if (__handle_buffered_iopage(env)) {
+    if (__handle_buffered_iopage(env) ||
+        bufioreq_local_port == EVTCHN_PORT_INVALID) {
         qemu_mod_timer(buffered_io_timer,
                 BUFFER_IO_MAX_DELAY + qemu_get_clock(rt_clock));
     } else {
@@ -605,6 +612,7 @@ int main_loop(void)
 
     buffered_io_timer = qemu_new_timer(rt_clock, handle_buffered_io,
 				       cpu_single_env);
+    qemu_mod_timer(buffered_io_timer, qemu_get_clock(rt_clock));
 
     if (evtchn_fd != -1)
         qemu_set_fd_handler(evtchn_fd, cpu_handle_ioreq, NULL, env);
