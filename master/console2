diff --git a/hw/vga-xengt.c b/hw/vga-xengt.c
index d4436cb..7afd214 100644
--- a/hw/vga-xengt.c
+++ b/hw/vga-xengt.c
@@ -39,6 +39,7 @@ typedef uint32_t pci_addr_t;
 #include "assert.h"
 
 #include <sys/ioctl.h>
+#include <sys/mman.h>
 #include <drm/drm.h>
 #include <drm/i915_drm.h>
 #include <xf86drm.h>
@@ -266,6 +267,7 @@ done:
 }
 
 typedef struct xengt_fb {
+    void *base;
     struct drm_i915_gem_vgtbuffer gem_vgtbuffer;
 } xengt_fb_t;
 
@@ -273,10 +275,15 @@ typedef struct xengt_fb {
 
 static xengt_fb_t xengt_fb[XENGT_NR_FB];
 
+#define	P2ROUNDUP(_x, _a) -(-(_x) & -(_a))
+
 static xengt_fb_t *xengt_new_fb(struct drm_i915_gem_vgtbuffer *gem_vgtbuffer)
 {
+    struct drm_i915_gem_mmap_gtt gem_mmap_gtt;
     xengt_fb_t *fb;
+    size_t size;
     int i;
+    int rc;
 
     for (i = 0; i < XENGT_NR_FB; i++) {
         fb = &xengt_fb[i];
@@ -288,15 +295,38 @@ static xengt_fb_t *xengt_new_fb(struct drm_i915_gem_vgtbuffer *gem_vgtbuffer)
     goto fail1;
 
 empty_slot:
-    qemu_log("vGT: %s %d -> %u\n", __func__, i, gem_vgtbuffer->handle);
+    memset(&gem_mmap_gtt, 0, sizeof (gem_mmap_gtt));
+    gem_mmap_gtt.handle = gem_vgtbuffer->handle;
 
-    fb->gem_vgtbuffer = *gem_vgtbuffer;
+    rc = drmIoctl(drm_fd, DRM_IOCTL_I915_GEM_MMAP_GTT, &gem_mmap_gtt);
+    if (rc < 0)
+        goto fail2;
+
+    size = gem_vgtbuffer->size * TARGET_PAGE_SIZE;
 
+    fb->base = mmap(NULL, size, PROT_READ, MAP_SHARED,
+		    drm_fd, gem_mmap_gtt.offset);
+    if (fb->base == MAP_FAILED)
+        goto fail3;
+
+    qemu_log("vGT: %s %u (%ux%ux%u)-> %p(+%p)\n", __func__,
+	     gem_vgtbuffer->handle, gem_vgtbuffer->width,
+	     gem_vgtbuffer->height, gem_vgtbuffer->bpp,
+             fb->base, (void *)size);
+
+    fb->gem_vgtbuffer = *gem_vgtbuffer;
     return fb;
 
+fail3:
+    qemu_log("%s: fail3\n", __func__);
+
+fail2:
+    qemu_log("%s: fail2\n", __func__);
+
 fail1:
-    return NULL;
-        
+    qemu_log("%s: fail1\n", __func__);
+
+    return NULL;       
 }
 
 static xengt_fb_t *xengt_lookup_fb(struct drm_i915_gem_vgtbuffer *gem_vgtbuffer)
@@ -315,6 +345,16 @@ static xengt_fb_t *xengt_lookup_fb(struct drm_i915_gem_vgtbuffer *gem_vgtbuffer)
     return NULL;
 }
 
+static void xengt_close_object(uint32_t handle)
+{
+    struct drm_gem_close gem_close;
+
+    memset(&gem_close, 0, sizeof (gem_close));
+    gem_close.handle = handle;
+
+    (void) drmIoctl(drm_fd, DRM_IOCTL_GEM_CLOSE, &gem_close);
+}
+
 static xengt_fb_t *xengt_get_fb(void)
 {
     struct drm_i915_gem_vgtbuffer gem_vgtbuffer;
@@ -331,17 +371,15 @@ static xengt_fb_t *xengt_get_fb(void)
         goto done;
 
     if ((fb = xengt_lookup_fb(&gem_vgtbuffer)) != NULL) {
-        struct drm_gem_close gem_close;
-
         /* We don't need the new object so close it */
-        memset(&gem_close, 0, sizeof (gem_close));
-        gem_close.handle = gem_vgtbuffer.handle;
-
-        (void) drmIoctl(drm_fd, DRM_IOCTL_GEM_CLOSE, &gem_close);
+        xengt_close_object(gem_vgtbuffer.handle);
         goto done;
     }
 
-    fb = xengt_new_fb(&gem_vgtbuffer);
+    if ((fb = xengt_new_fb(&gem_vgtbuffer)) == NULL) {
+        /* We can't use the new object so close it */
+        xengt_close_object(gem_vgtbuffer.handle);
+    }
 
 done:
     return fb;
